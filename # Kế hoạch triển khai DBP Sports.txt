# Kế hoạch triển khai DBP Sports

## 1) Mục tiêu

* Nền tảng tổ chức giải bóng đá nghiệp dư: tạo giải, lịch, trực tiếp, kết quả, BXH.
* MVP: công khai lịch và xem livestream. Có đăng nhập cơ bản.

## 2) Phạm vi MVP

* Trang: Trang chủ, Giải đấu (list + detail), Livestream (list + watch), Đăng nhập/Đăng ký/Đăng xuất.
* Quản trị: dùng Django Admin cho CRUD đội, giải, trận.

## 3) Kiến trúc & Stack

* Backend: Django 5.x, Django ORM, Django Admin.
* DB: SQLite dev, PostgreSQL prod.
* Frontend: HTML + Bootstrap 5, template Django.
* Stream: HLS (.m3u8) và YouTube embed.
* Dev tooling: Black, Ruff, Pylance, Prettier cho HTML/JS.
* Triển khai: Docker + Railway/Render (1 web dyno + Postgres).

## 4) Cấu trúc dự án (đang dùng)

```
backend/
  dbpsports_core/        # settings, urls
  tournaments/           # logic giải, trận, livestream
  users/                 # auth views đơn giản
static/ templates/
```

## 5) Mô hình dữ liệu (MVP)

**Tournament**

* id, name, description
* start\_date, end\_date
* banner\_image (nullable)

**Team**

* id, name, logo (nullable)

**Match**

* id, tournament -> FK(Tournament)
* home -> FK(Team), away -> FK(Team)
* start\_time, status: scheduled|live|finished
* home\_score, away\_score (default 0)
* hls\_url (nullable), youtube\_id (nullable)

> Index gợi ý: `Match(tournament, start_time)`, `Match(status)`

## 6) Luồng người dùng

* Khách: xem danh sách giải, xem chi tiết, xem lịch, mở livestream.
* Người dùng: đăng ký, đăng nhập. (MVP chưa cần vai trò)
* Admin: nhập dữ liệu trong Django Admin.

## 7) Lộ trình theo Sprint

### Sprint 0 — Thiết lập (đã phần lớn xong)

* VS Code, venv, cài `django black ruff debugpy`.
* `django-admin startproject`, `startapp tournaments`, `startapp users`.
* Bootstrap 5, base template, static.
* **AC**: chạy server, render trang chủ với template.

### Sprint 1 — Giải đấu: list + detail động

* URL: `/` hiển thị 4 giải nổi bật. `/tournaments/<id>/` hiển thị chi tiết.
* View: `home`, `tournament_detail`.
* Template: `tournaments/home.html`, `tournaments/tournament_detail.html`.
* Seed 2–3 giải qua Admin.
* **AC**: Nút “Xem chi tiết” dẫn đúng trang; 200 OK; ngày hiển thị đúng định dạng.

### Sprint 2 — Auth cơ bản

* Dùng `LoginView`, `LogoutView`, form `UserCreationForm`.
* URL: `/login`, `/logout`, `/signup`.
* Template: `login.html`, `users/signup.html`.
* **AC**: Đăng ký thành công chuyển về `/login`; đăng nhập xong thấy nút “Đăng xuất”.

### Sprint 3 — Đội và Trận đấu

* Tạo model `Team`, `Match` như mục 5.
* Đăng ký Admin cho 3 model.
* Nhập dữ liệu mẫu: 4 đội, 4–6 trận.
* Hiển thị lịch trận trong chi tiết giải (`tournament_detail.html`).
* **AC**: Trang chi tiết giải liệt kê trận theo thời gian; link đến `/watch/<match_id>/`.

### Sprint 4 — Livestream

* View: `livestream_view` (đang live, sắp diễn ra), `match_watch`.
* Player: HLS.js cho `hls_url`, iframe cho `youtube_id`.
* **AC**: Mở được video test HLS hoặc YouTube; fallback hoạt động nếu thiếu nguồn.

### Sprint 5 — Kết quả & BXH đơn giản

* Khi `status=finished`, lưu `home_score`, `away_score`.
* BXH theo giải: 3 điểm thắng, 1 hòa, 0 thua.
* Template: bảng BXH trong `tournament_detail.html`.
* **AC**: BXH tính đúng với bộ dữ liệu mẫu.

### Sprint 6 — Trang Shop (tùy chọn)

* Trang tĩnh sản phẩm; chưa cần thanh toán thật.
* **AC**: xem danh sách và chi tiết sản phẩm tĩnh.

### Sprint 7 — Triển khai

* Dockerfile, `gunicorn`, `whitenoise`.
* Env: `SECRET_KEY`, `DEBUG=0`, `ALLOWED_HOSTS`, DB URL.
* Collectstatic.
* **AC**: Prod lên Railway/Render, trang chủ 200, xem được một stream công khai.

## 8) Router & View (MVP)

* `/` → `tournaments.views.home`
* `/tournaments/<int:pk>/` → `tournament_detail`
* `/livestream/` → `livestream_view`
* `/watch/<int:pk>/` → `match_watch`
* `/login`, `/logout`, `/signup`

## 9) Tiêu chuẩn mã nguồn

* Format: Black, `editor.formatOnSave=true`.
* Lint: Ruff trên save.
* i18n ngày tháng: filter `date:"d/m/Y"`.
* Commit: `feat|fix|chore(scope): message`.

## 10) Dữ liệu mẫu

* 2 giải, 4 đội, 6 trận. 1 trận live với `youtube_id` demo.
* Ảnh: lưu trong `static/images/` giai đoạn dev.

## 11) Kiểm thử

* Unit: model `Match` tính tỉ số, ordering.
* View test: 200 OK cho các URL chính, context có dữ liệu.
* Manual: mở player HLS/YouTube.

## 12) Rủi ro & phương án

* Nguồn stream không ổn định → có sẵn YouTube fallback.
* Băng thông ảnh tĩnh → dùng `whitenoise` và nén ảnh.
* DB SQLite → chuyển Postgres khi triển khai.

## 13) Kế hoạch mở rộng sau MVP

* Vai trò tổ chức, quản trị viên.
* API JSON cho mobile.
* Đăng ký đội, lịch tự động vòng tròn.
* Bình luận trực tiếp, thống kê cầu thủ.

## 14) Bước tiếp theo

* Bắt đầu **Sprint 1**. Tạo URL, view, template chi tiết giải. Chuẩn bị 2–3 bản ghi `Tournament` trong Admin.

## Phần bổ sung: Ý tưởng tổng quan và kế hoạch không-code

### Tầm nhìn sản phẩm

* Sân chơi số cho giải bóng đá phong trào. Tổ chức, phát trực tiếp qua YouTube, cập nhật kết quả nhanh.

### Định vị

* Nhẹ, dễ nhập liệu, tối ưu cho người tổ chức nhỏ. Không cạnh tranh OTT. Chỉ nhúng YouTube.

### Persona chính

* **Organizer**: tạo giải, lịch, nhập tỉ số, phát trực tiếp.
* **Fan**: vào xem lịch, xem live, xem kết quả, BXH.
* **Trọng tài/CTV**: hỗ trợ nhập kết quả.

### KPI MVP

* 1 giải hoạt động đủ vòng.
* ≥3 trận có livestream YouTube hợp lệ.
* Tỷ lệ mở trang `watch` ≥60% số phiên từ `livestream`.

### Phạm vi chức năng chi tiết (MVP)

1. **Giải đấu**: danh sách + chi tiết, banner, mô tả, lịch trận.
2. **Trận đấu**: trạng thái scheduled|live|finished, tỉ số, link YouTube.
3. **Livestream**: danh sách trận live + sắp diễn ra, trang xem `watch` nhúng YouTube-only.
4. **BXH**: tính điểm cơ bản (3–1–0), hiệu số.
5. **Auth cơ bản**: đăng ký, đăng nhập, đăng xuất. Không phân quyền phức tạp.
6. **Admin**: nhập Tournament/Team/Match bằng Django Admin.

### Không nằm trong MVP

* Thanh toán, bán vé, chat, bình luận realtime, upload video, lịch thi đấu tự động, phân quyền chi tiết.

### Yêu cầu phi chức năng

* Thời gian tải trang < 2s trên mạng 4G.
* SEO: thẻ meta, URL sạch, sitemap đơn giản.
* Khả dụng: 99% trong giờ trận.

### Khung UX (wireframe chữ)

* **Trang chủ**: hero banner + CTA → Giải đấu nổi bật → Livestream → footer.
* **Giải đấu chi tiết**: thông tin giải → lịch trận (card) → BXH.
* **Livestream**: nhóm "Đang trực tiếp" và "Sắp diễn ra".
* **Watch**: tiêu đề trận, iframe YouTube, thông tin tỉ số cơ bản.
* **Auth**: form đơn giản, chuyển hướng hợp lý.

### Mô hình dữ liệu v1 (YouTube-only)

* `Match.youtube_id`: bắt buộc khi `status=live`. Không dùng `hls_url`.
* Ràng buộc: nếu `finished` thì có `home_score`, `away_score` hợp lệ.

### Quy trình vận hành

1. Tạo giải + đội.
2. Lập danh sách trận với giờ đá.
3. Trước giờ bóng lăn: tạo livestream trên YouTube → lấy `youtube_id` → gán vào trận → set `status=live`.
4. Sau trận: nhập tỉ số → set `finished` → BXH cập nhật.

### Kiểm thử UAT

* Mở tất cả URL chính trả 200.
* Watch page phát được video với `youtube_id` demo.
* BXH khớp với dữ liệu mẫu.

### Triển khai & chi phí dự kiến

* Render/Railway: 1 service web, 1 Postgres.
* Static qua Whitenoise. Domain custom qua nhà cung cấp.
* Ước tính MVP: \~10–20 USD/tháng.

### Rủi ro & giảm thiểu

* **Gỡ video YouTube**: chuẩn bị video dự phòng không bản quyền; cập nhật `youtube_id` nhanh.
* **Bản quyền**: chỉ phát giải do ban tổ chức sở hữu quyền.
* **Tải cao**: YouTube gánh băng thông video; trang ta vẫn nhẹ.

### Lộ trình tuần (không code chi tiết)

* **Tuần 1**: chốt mô hình dữ liệu, UX chữ, nhập dữ liệu mẫu.
* **Tuần 2**: hoàn thiện trang Giải + Livestream + Watch.
* **Tuần 3**: Auth, BXH, kiểm thử, nội dung.
* **Tuần 4**: triển khai, chạy thử 1 giải pilot.

### Tiêu chuẩn chấp nhận tổng

* Người dùng xem được ít nhất 1 trận live qua YouTube.
* Mỗi trận có trang `watch` riêng, tiêu đề đúng, thời gian đúng.
* BXH cập nhật sau khi nhập tỉ số.

### Bước tiếp theo

* Xem lại phạm vi trên. Nếu đồng ý, khóa phạm vi MVP rồi chuyển sang Sprint 1 (không viết code quá mức).

## Đăng ký đội, thanh toán, banner trang chủ (không-code)

### 1) Homepage: chọn giải + banner

* Trường mới ở `Tournament`: `is_featured` (bool), `home_order` (int), `banner_image` (file), `reg_open`, `reg_close`, `reg_fee`, `roster_min`, `roster_max`, `roster_lock_hours`.
* Trang chủ hiển thị:

  * **Banner lớn**: 1 giải `is_featured` có `banner_image` theo `home_order`.
  * **Giải đang mở đăng ký**: grid các giải có `today ∈ [reg_open, reg_close]`.

### 2) Vai trò

* **Captain**: tạo đội, đăng ký giải, thanh toán, mời thành viên, khóa danh sách.
* **Player**: tạo tài khoản, nhận lời mời, cập nhật thông tin cá nhân.
* **Organizer**: duyệt đăng ký, xác minh thanh toán, khóa/mở khóa khi cần.

### 3) Luồng tự phục vụ

1. **Đăng ký tài khoản** → xác thực email cơ bản.
2. **Captain tạo đội** hoặc nhận quyền captain đội có sẵn.
3. **Chọn giải** từ trang chủ hoặc trang giải → bấm **Đăng ký thi đấu**.
4. Hệ thống tạo **TeamRegistration** ở trạng thái `draft`.
5. Wizard 4 bước:

   * B1: Thông tin đội (tên, logo, liên hệ).
   * B2: Danh sách cầu thủ tạm (mời bằng link/invite code; người chơi tự điền số áo, vị trí).
   * B3: **Thanh toán phí**.
   * B4: Xác nhận và gửi.
6. Sau khi gửi, trạng thái `submitted`. Organizer kiểm tra.
7. **Thanh toán**:

   * **Pha 1 (MVP)**: Chuyển khoản ngân hàng. Captain nhập `ref_code` và **upload ảnh biên lai**.
   * **Pha 2**: Tích hợp cổng (VNPAY/MoMo/ZaloPay). Có `PaymentTransaction` và webhook để auto-verify.
8. Khi thanh toán **được xác minh**, `payment_status=verified`, `registration_status=confirmed`.
9. Hệ thống **mở khóa roster** cho đến `roster_lock_hours` trước trận đầu hoặc trước `reg_close` (chọn 1). Sau đó danh sách **đóng**.
10. Đến ngày thi đấu: đội chỉ cần ra sân.

### 4) Mô hình dữ liệu bổ sung

* `Team(captain -> User, name, logo)`
* `TeamMember(team, user, role: captain|player, status: invited|accepted, jersey_number, position)`
* `TeamRegistration(team, tournament, status: draft|submitted|confirmed|rejected|cancelled, payment_status: unpaid|pending|verified|refunded, amount, payment_method, proof_image, ref_code, paid_at, verified_at, verified_by)`
* `RosterEntry(registration, user, jersey_number, position, status)`
* `PaymentTransaction(registration, provider, amount, state, provider_ref, created_at)`

> Ràng buộc: Unique `(user, tournament)` trong `RosterEntry` để 1 người không đá 2 đội cùng giải. Unique `(jersey_number, team, tournament)`.

### 5) Màn hình/Dashboard

* **Home**: banner giải nổi bật + danh sách giải mở đăng ký.
* **Tournament detail**: nút **Đăng ký thi đấu** + quy định phí và size đội.
* **Captain dashboard**: tiến độ 4 bước, trạng thái thanh toán, nút mời thành viên.
* **Player dashboard**: danh sách lời mời → chấp nhận → cập nhật số áo.
* **Organizer dashboard**: hàng đợi duyệt đăng ký, màn hình xác minh thanh toán, nút khóa/mở roster.

### 6) Quy tắc kinh doanh

* Size đội trong `[roster_min, roster_max]` để nộp hồ sơ.
* `submitted` cần có tối thiểu `roster_min` người.
* Chỉ **captain** chỉnh sửa hồ sơ và thanh toán.
* Mở khóa roster tự động khi `confirmed`, khóa cứng trước trận đầu `roster_lock_hours`.

### 7) Email/Thông báo (MVP có thể là email thủ công)

* Khi đội nộp hồ sơ.
* Khi thanh toán được xác minh.
* 24 giờ trước thời điểm **lock roster**.

### 8) Tiêu chuẩn chấp nhận

* Captain có thể đăng ký đội vào một giải, thanh toán, được xác nhận.
* Người chơi tự tạo tài khoản, nhận link mời, vào đội, cập nhật số áo.
* Organizer nhìn được danh sách đăng ký và xác minh thanh toán.
* Roster bị khóa đúng thời điểm cấu hình.

### 9) Sprint mới cho tính năng này

* **Sprint A**: Homepage feature + cửa sổ đăng ký giải (trường `reg_*`).
* **Sprint B**: Tạo đội, vai trò captain, mời thành viên.
* **Sprint C**: TeamRegistration wizard không tích hợp cổng, upload biên lai.
* **Sprint D**: Roster management + quy tắc lock.
* **Sprint E**: Organizer dashboard + quy trình xác minh.
* **Sprint F**: Kiểm thử E2E với 1 giải pilot.

### 10) Rủi ro & giảm thiểu

* Sai sót thanh toán → yêu cầu `ref_code` bắt buộc và đối soát bán tự động.
* Lạm dụng nhiều tài khoản → xác thực email + giới hạn 1 người/giải.
* Captain bỏ cuộc → Organizer chuyển quyền captain trong dashboard.

### 11) Quyết định mở

* Cho phép hoàn tiền đến H-48 trước trận đầu hay không.
* Cho phép thay người sau khi khóa roster hay không (phí thay người?).

### 12) Bước tiếp theo

* Chốt tham số: `reg_fee`, `roster_min/max`, `roster_lock_hours`, phương thức thanh toán Pha 1.
* Sau khi chốt, bắt đầu **Sprint A**.
