cd dbpsports

cd backend

Ctrl + C

cd ..

.\venv\Scripts\activate

python manage.py runserver

git add .
git commit -m "Them vai tro 2 loi sua cau thu"
git push


#Cập Nhật Dữ Liệu

python manage.py makemigrations
python manage.py migrate

# xoá git
git checkout main
git pull origin main

git reset --hard 9b7fc76

#làm mới thông tin sever
git fetch origin
git push origin main --force-with-lease

#Lệnh này sẽ không kiểm tra gì cả và ghi đè trực tiếp lịch sử trên server bằng lịch sử ở máy bạn.
git push origin main --force




Sao lưu DB + media (PowerShell)

Tắt server (Ctrl+C). Chạy:

$ts = Get-Date -Format yyyyMMdd_HHmm
$dest = "D:\dbpsports\backups\$ts"
New-Item -ItemType Directory -Path $dest -Force | Out-Null
Copy-Item "D:\dbpsports\backend\db.sqlite3" "$dest\"
Copy-Item "D:\dbpsports\backend\media" "$dest\media" -Recurse
Compress-Archive -Path "$dest\db.sqlite3","$dest\media" -DestinationPath "D:\dbpsports\backups\dbpsports_$ts.zip"

# 1. Thêm tất cả thay đổi
git add .

# 2. Ghi lại thay đổi với một lời nhắn
git commit -m "Nội dung cập nhật của tôi"

# 3. Đẩy lên GitHub
git push


# Chạy Trên Host
manage.py migrate (Để tạo các bảng trong database MySQL mới)

manage.py collectstatic --noinput (Để sửa lỗi file tĩnh)


Bước: Cập nhật Database
Sau khi có "bản thiết kế" mới, chúng ta cần cập nhật lại "công trình".

Trong Terminal, chạy lệnh makemigrations:

Bash

python manage.py makemigrations
Tiếp theo, chạy lệnh migrate:

Bash

python manage.py migrate





Cách giải quyết
Bạn cần hợp nhất các thay đổi từ remote về máy mình trước khi đẩy lên. Có 2 cách phổ biến để làm việc này, bạn chỉ cần chọn một trong hai.

Cách 1: Dùng rebase (Khuyến khích)
Cách này sẽ giúp lịch sử commit của bạn gọn gàng và thẳng hàng hơn. Nó sẽ lấy 2 commit của bạn, tạm cất đi, cập nhật các commit mới từ remote về, sau đó đặt 2 commit của bạn lên trên cùng.

Kéo code từ remote về và tự động rebase:

Bash

git pull --rebase origin main
Sau khi lệnh trên chạy xong (nếu không có xung đột/conflict), bạn hãy đẩy code lên:

Bash

git push origin main
Cách 2: Dùng merge (Cách mặc định)
Cách này sẽ tạo ra một "merge commit" để gộp 2 nhánh lịch sử lại với nhau. Cách này đơn giản nhưng sẽ làm lịch sử commit của bạn trông phức tạp hơn một chút.

Kéo code từ remote về và merge:

Bash

git pull origin main
Git có thể sẽ mở trình soạn thảo để bạn nhập commit message cho việc merge. Bạn chỉ cần lưu lại và đóng nó.

Đẩy code lên:

Bash

git push origin main
Tóm lại, bạn chỉ cần chạy git pull --rebase origin main rồi git push origin main là được.


Client secret: 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
-------------------------------------------------

git log --oneline

Cách 1: "Nhìn trộm" quá khứ một cách AN TOÀN (git checkout) 🕵️‍♂️
Đây là cách bạn nên dùng khi mới bắt đầu. Nó cho phép bạn tạm thời quay về một phiên bản cũ để xem code, copy lại một đoạn code đã xóa... mà không làm ảnh hưởng gì đến hiện tại.

Copy mã định danh của commit bạn muốn xem lại (ví dụ: 7331259).

Chạy lệnh checkout với mã đó:

Bash

git checkout 7331259
Ngay lập tức, toàn bộ các file trong dự án của bạn sẽ quay trở về đúng trạng thái ở thời điểm bạn tạo "Save Point" đó. Bạn có thể mở các file ra xem, chạy lại server để thấy giao diện cũ...

Để quay trở lại hiện tại: Khi đã xem xong, bạn chỉ cần gõ lệnh sau để quay về phiên bản mới nhất:

Bash

git checkout master
Cách 2: "Du hành thời gian" và XÓA BỎ tương lai (git reset) ⚠️
Cảnh báo: Cách này RẤT NGUY HIỂM và sẽ XÓA VĨNH VIỄN tất cả các thay đổi bạn đã làm sau "Save Point" đó. Chỉ sử dụng khi bạn chắc chắn 100% muốn vứt bỏ toàn bộ công việc đã làm gần đây.

Copy mã định danh của commit bạn muốn quay về và xóa bỏ mọi thứ sau nó.

Chạy lệnh reset --hard:

Bash

git reset --hard 7331259
Lệnh này sẽ xóa vĩnh viễn commit 9cb398d ("Thiết kế form...") và đưa dự án của bạn trở lại trạng thái của commit 7331259. Không có cách nào để hoàn tác lại hành động này.