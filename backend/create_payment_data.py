#!/usr/bin/env python
import os
import sys
import django

# Setup Django environment
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'dbpsports_core.settings')
django.setup()

from shop.models import PaymentMethod, BankAccount, EWalletAccount, PaymentStep, ContactInfo, PaymentPolicy

def create_payment_data():
    print("Dang tao du lieu thanh toan mau...")
    
    # 1. T·∫°o PaymentMethod
    print("Tao phuong thuc thanh toan...")
    
    # Chuy·ªÉn kho·∫£n ng√¢n h√†ng
    bank_method, created = PaymentMethod.objects.get_or_create(
        name="Chuy·ªÉn kho·∫£n ng√¢n h√†ng",
        defaults={
            'payment_type': 'bank_transfer',
            'description': 'Thanh to√°n qua chuy·ªÉn kho·∫£n ng√¢n h√†ng - An to√†n v√† nhanh ch√≥ng',
            'icon': 'fas fa-university',
            'order': 1,
            'is_active': True
        }
    )
    print(f"PaymentMethod: {bank_method.name} {'(created)' if created else '(already exists)'}")
    
    # V√≠ ƒëi·ªán t·ª≠
    ewallet_method, created = PaymentMethod.objects.get_or_create(
        name="V√≠ ƒëi·ªán t·ª≠",
        defaults={
            'payment_type': 'e_wallet',
            'description': 'Thanh to√°n qua c√°c v√≠ ƒëi·ªán t·ª≠ ph·ªï bi·∫øn',
            'icon': 'fas fa-mobile-alt',
            'order': 2,
            'is_active': True
        }
    )
    print(f"PaymentMethod: {ewallet_method.name} {'(created)' if created else '(already exists)'}")
    
    # COD
    cod_method, created = PaymentMethod.objects.get_or_create(
        name="COD (Thanh to√°n khi nh·∫≠n h√†ng)",
        defaults={
            'payment_type': 'cod',
            'description': 'Thanh to√°n b·∫±ng ti·ªÅn m·∫∑t khi nh·∫≠n h√†ng',
            'icon': 'fas fa-truck',
            'order': 3,
            'is_active': True
        }
    )
    print(f"PaymentMethod: {cod_method.name} {'(created)' if created else '(already exists)'}")
    
    # 2. T·∫°o BankAccount
    print("Tao tai khoan ngan hang...")
    
    banks = [
        {
            'bank_name': 'Vietcombank',
            'account_holder': 'DBP Sports',
            'account_number': '1234567890',
            'branch': 'H√† N·ªôi',
            'order': 1
        },
        {
            'bank_name': 'Techcombank',
            'account_holder': 'DBP Sports',
            'account_number': '0987654321',
            'branch': 'TP.HCM',
            'order': 2
        },
        {
            'bank_name': 'BIDV',
            'account_holder': 'DBP Sports',
            'account_number': '1122334455',
            'branch': 'ƒê√† N·∫µng',
            'order': 3
        }
    ]
    
    for bank_data in banks:
        bank_account, created = BankAccount.objects.get_or_create(
            payment_method=bank_method,
            bank_name=bank_data['bank_name'],
            defaults={
                'account_holder': bank_data['account_holder'],
                'account_number': bank_data['account_number'],
                'branch': bank_data['branch'],
                'order': bank_data['order'],
                'is_active': True
            }
        )
        print(f"‚úÖ BankAccount: {bank_account.bank_name} - {bank_account.account_number} {'(created)' if created else '(already exists)'}")
    
    # 3. T·∫°o EWalletAccount
    print("üí≥ T·∫°o t√†i kho·∫£n v√≠ ƒëi·ªán t·ª≠...")
    
    ewallets = [
        {
            'wallet_name': 'PayPal',
            'account_info': 'dbpsports@gmail.com',
            'order': 1
        },
        {
            'wallet_name': 'MoMo',
            'account_info': '0901234567',
            'order': 2
        },
        {
            'wallet_name': 'ZaloPay',
            'account_info': '0901234567',
            'order': 3
        }
    ]
    
    for ewallet_data in ewallets:
        ewallet_account, created = EWalletAccount.objects.get_or_create(
            payment_method=ewallet_method,
            wallet_name=ewallet_data['wallet_name'],
            defaults={
                'account_info': ewallet_data['account_info'],
                'order': ewallet_data['order'],
                'is_active': True
            }
        )
        print(f"‚úÖ EWalletAccount: {ewallet_account.wallet_name} - {ewallet_account.account_info} {'(created)' if created else '(already exists)'}")
    
    # 4. T·∫°o PaymentStep
    print("üìã T·∫°o c√°c b∆∞·ªõc thanh to√°n...")
    
    steps = [
        {
            'title': 'Ch·ªçn s·∫£n ph·∫©m',
            'description': 'Duy·ªát v√† ch·ªçn s·∫£n ph·∫©m b·∫°n mu·ªën mua t·ª´ c·ª≠a h√†ng',
            'order': 1
        },
        {
            'title': 'Th√™m v√†o gi·ªè h√†ng',
            'description': 'Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng v√† ki·ªÉm tra th√¥ng tin',
            'order': 2
        },
        {
            'title': 'Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n',
            'description': 'Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n ph√π h·ª£p v·ªõi b·∫°n',
            'order': 3
        },
        {
            'title': 'X√°c nh·∫≠n ƒë∆°n h√†ng',
            'description': 'Ki·ªÉm tra v√† x√°c nh·∫≠n th√¥ng tin ƒë∆°n h√†ng',
            'order': 4
        },
        {
            'title': 'Thanh to√°n',
            'description': 'Th·ª±c hi·ªán thanh to√°n theo ph∆∞∆°ng th·ª©c ƒë√£ ch·ªçn',
            'order': 5
        },
        {
            'title': 'Nh·∫≠n h√†ng',
            'description': 'Nh·∫≠n h√†ng v√† ki·ªÉm tra ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m',
            'order': 6
        }
    ]
    
    for step_data in steps:
        step, created = PaymentStep.objects.get_or_create(
            title=step_data['title'],
            defaults={
                'description': step_data['description'],
                'order': step_data['order'],
                'is_active': True
            }
        )
        print(f"‚úÖ PaymentStep: {step.order}. {step.title} {'(created)' if created else '(already exists)'}")
    
    # 5. T·∫°o ContactInfo
    print("üìû T·∫°o th√¥ng tin li√™n h·ªá...")
    
    contacts = [
        {
            'contact_type': 'phone',
            'name': 'Hotline',
            'value': '1900 1234',
            'description': '8:00 - 22:00 (T·∫•t c·∫£ c√°c ng√†y)',
            'icon': 'fas fa-phone',
            'order': 1
        },
        {
            'contact_type': 'messenger',
            'name': 'Facebook Messenger',
            'value': 'm.me/dbpsports',
            'description': 'Trong v√≤ng 5 ph√∫t',
            'icon': 'fab fa-facebook-messenger',
            'order': 2
        },
        {
            'contact_type': 'email',
            'name': 'Email',
            'value': 'support@dbpsports.com',
            'description': 'Trong v√≤ng 24 gi·ªù',
            'icon': 'fas fa-envelope',
            'order': 3
        },
        {
            'contact_type': 'zalo',
            'name': 'Zalo',
            'value': '0901234567',
            'description': 'Trong v√≤ng 10 ph√∫t',
            'icon': 'fab fa-zalo',
            'order': 4
        }
    ]
    
    for contact_data in contacts:
        contact, created = ContactInfo.objects.get_or_create(
            contact_type=contact_data['contact_type'],
            name=contact_data['name'],
            defaults={
                'value': contact_data['value'],
                'description': contact_data['description'],
                'icon': contact_data['icon'],
                'order': contact_data['order'],
                'is_active': True
            }
        )
        print(f"‚úÖ ContactInfo: {contact.name} - {contact.value} {'(created)' if created else '(already exists)'}")
    
    # 6. T·∫°o PaymentPolicy
    print("üìú T·∫°o ch√≠nh s√°ch thanh to√°n...")
    
    policies = [
        {
            'title': 'L∆∞u √ù Quan Tr·ªçng',
            'content': '''‚Ä¢ Vui l√≤ng chuy·ªÉn kho·∫£n ƒë√∫ng s·ªë ti·ªÅn v√† ghi r√µ n·ªôi dung chuy·ªÉn kho·∫£n
‚Ä¢ Sau khi chuy·ªÉn kho·∫£n, vui l√≤ng g·ª≠i ·∫£nh bi√™n lai qua Zalo/Facebook ƒë·ªÉ x√°c nh·∫≠n
‚Ä¢ ƒê∆°n h√†ng s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong v√≤ng 24 gi·ªù sau khi x√°c nh·∫≠n thanh to√°n
‚Ä¢ Ch√∫ng t√¥i ch·ªâ giao h√†ng ƒë·∫øn ƒë·ªãa ch·ªâ ƒë√£ ƒëƒÉng k√Ω trong ƒë∆°n h√†ng
‚Ä¢ Vui l√≤ng ki·ªÉm tra h√†ng tr∆∞·ªõc khi thanh to√°n (ƒë·ªëi v·ªõi COD)''',
            'policy_type': 'warning',
            'icon': 'fas fa-exclamation-triangle',
            'order': 1
        },
        {
            'title': 'Ch√≠nh S√°ch ƒê·ªïi Tr·∫£',
            'content': '''‚Ä¢ ƒê·ªïi tr·∫£ mi·ªÖn ph√≠: Trong v√≤ng 7 ng√†y k·ªÉ t·ª´ ng√†y nh·∫≠n h√†ng
‚Ä¢ ƒêi·ªÅu ki·ªán: S·∫£n ph·∫©m c√≤n nguy√™n tem, ch∆∞a s·ª≠ d·ª•ng
‚Ä¢ Ho√†n ti·ªÅn: 100% gi√° tr·ªã s·∫£n ph·∫©m (tr·ª´ ph√≠ v·∫≠n chuy·ªÉn)
‚Ä¢ B·∫£o h√†nh: Theo ch√≠nh s√°ch c·ªßa t·ª´ng nh√† s·∫£n xu·∫•t''',
            'policy_type': 'success',
            'icon': 'fas fa-shield-alt',
            'order': 2
        }
    ]
    
    for policy_data in policies:
        policy, created = PaymentPolicy.objects.get_or_create(
            title=policy_data['title'],
            defaults={
                'content': policy_data['content'],
                'policy_type': policy_data['policy_type'],
                'icon': policy_data['icon'],
                'order': policy_data['order'],
                'is_active': True
            }
        )
        print(f"‚úÖ PaymentPolicy: {policy.title} {'(created)' if created else '(already exists)'}")
    
    print("\nüéâ Ho√†n th√†nh! D·ªØ li·ªáu thanh to√°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng.")
    print("üìù B√¢y gi·ªù b·∫°n c√≥ th·ªÉ:")
    print("   1. V√†o Django Admin ƒë·ªÉ ch·ªânh s·ª≠a th√¥ng tin")
    print("   2. Xem trang payment-info ƒë·ªÉ ki·ªÉm tra hi·ªÉn th·ªã")
    print("   3. Th√™m/s·ª≠a/x√≥a c√°c th√¥ng tin theo nhu c·∫ßu")

if __name__ == '__main__':
    create_payment_data()
