"""
YouTube Import Views cho Music Player
S·ª≠ d·ª•ng yt-dlp ƒë·ªÉ download audio t·ª´ YouTube videos/playlists
"""
import os
import tempfile
import logging
import json
import urllib.request
import threading
import time
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
from django.contrib.auth.decorators import login_required
from django.utils.decorators import method_decorator
from django.views import View
from django.conf import settings
from django.core.files import File
from django.core.files.storage import default_storage
from django.db import transaction
from django.core.files.base import ContentFile
from django.utils import timezone
from io import BytesIO
from PIL import Image
import yt_dlp
from mutagen import File as MutagenFile
from mutagen.id3 import ID3, TIT2, TPE1, TALB, TDRC, APIC
from mutagen.mp3 import MP3
from .models import UserTrack, UserPlaylist, UserPlaylistTrack, MusicPlayerSettings
from .utils import get_audio_duration

logger = logging.getLogger(__name__)

# Global dictionary to track active import sessions
# Key: user_id, Value: {'cancelled': bool, 'thread': threading.Thread, 'progress': dict}
active_imports = {}
import_lock = threading.Lock()


def start_import_session(user_id):
    """B·∫Øt ƒë·∫ßu m·ªôt import session m·ªõi"""
    with import_lock:
        active_imports[user_id] = {
            'cancelled': False,
            'thread': None,
            'progress': {'status': 'starting', 'message': 'ƒêang kh·ªüi t·∫°o...', 'percentage': 0},
            'start_time': time.time()
        }
        logger.info(f"Started import session for user {user_id}")


def cancel_import_session(user_id):
    """H·ªßy import session c·ªßa user"""
    with import_lock:
        if user_id in active_imports:
            active_imports[user_id]['cancelled'] = True
            logger.info(f"Cancelled import session for user {user_id}")
            return True
        return False


def is_import_cancelled(user_id):
    """Ki·ªÉm tra xem import c√≥ b·ªã h·ªßy kh√¥ng"""
    with import_lock:
        return active_imports.get(user_id, {}).get('cancelled', False)


def update_import_progress(user_id, status, message, percentage=0):
    """C·∫≠p nh·∫≠t ti·∫øn tr√¨nh import"""
    with import_lock:
        if user_id in active_imports:
            active_imports[user_id]['progress'] = {
                'status': status,
                'message': message,
                'percentage': percentage
            }


def get_import_progress(user_id):
    """L·∫•y ti·∫øn tr√¨nh import hi·ªán t·∫°i"""
    with import_lock:
        return active_imports.get(user_id, {}).get('progress', {})


def end_import_session(user_id):
    """K·∫øt th√∫c import session"""
    with import_lock:
        if user_id in active_imports:
            del active_imports[user_id]
            logger.info(f"Ended import session for user {user_id}")


def download_and_process_thumbnail(thumbnail_url, max_size=(512, 512), quality=85):
    """
    Download thumbnail t·ª´ URL v√† resize/optimize
    
    Args:
        thumbnail_url: URL c·ªßa thumbnail
        max_size: K√≠ch th∆∞·ªõc t·ªëi ƒëa (width, height)
        quality: JPEG quality (0-100)
        
    Returns:
        BytesIO: BytesIO ch·ª©a image ƒë√£ ƒë∆∞·ª£c optimize, ho·∫∑c None n·∫øu l·ªói
    """
    try:
        print(f"üîç DEBUG download_and_process_thumbnail: thumbnail_url={thumbnail_url}")
        logger.info(f"üîç DEBUG download_and_process_thumbnail: thumbnail_url={thumbnail_url}")
        
        if not thumbnail_url:
            print("‚ùå DEBUG: thumbnail_url is empty")
            logger.warning("thumbnail_url is empty")
            return None
        
        # Download thumbnail
        with urllib.request.urlopen(thumbnail_url, timeout=10) as response:
            image_data = response.read()
        
        if not image_data:
            logger.warning("Empty thumbnail data")
            return None
        
        # Open v√† resize image
        img = Image.open(BytesIO(image_data))
        
        # Convert RGBA/LA/P to RGB if needed
        if img.mode in ('RGBA', 'LA', 'P'):
            background = Image.new('RGB', img.size, (255, 255, 255))
            if img.mode == 'P':
                img = img.convert('RGBA')
            background.paste(img, mask=img.split()[-1] if img.mode in ('RGBA', 'LA') else None)
            img = background
        
        # Resize n·∫øu c·∫ßn
        if img.width > max_size[0] or img.height > max_size[1]:
            img.thumbnail(max_size, Image.Resampling.LANCZOS)
        
        # Save to BytesIO
        output = BytesIO()
        img.save(output, format='JPEG', quality=quality)
        output.seek(0)
        
        logger.info(f"Thumbnail downloaded and processed: {img.width}x{img.height}, {len(output.getvalue())} bytes")
        return output
        
    except Exception as e:
        logger.error(f"Error downloading thumbnail: {str(e)}", exc_info=True)
        return None


def attach_thumbnail_to_track(track, thumbnail_url):
    """
    Attach thumbnail v√†o track
    
    Args:
        track: UserTrack instance
        thumbnail_url: URL c·ªßa thumbnail t·ª´ YouTube
        
    Returns:
        bool: True n·∫øu th√†nh c√¥ng, False n·∫øu l·ªói
    """
    try:
        print(f"üîç DEBUG attach_thumbnail_to_track: track={track.id if track else None}, thumbnail_url={thumbnail_url}")
        logger.info(f"üîç DEBUG attach_thumbnail_to_track: track={track.id if track else None}, thumbnail_url={thumbnail_url}")
        
        if not thumbnail_url or not track:
            print(f"‚ùå DEBUG: Missing thumbnail_url or track. thumbnail_url={thumbnail_url}, track={track}")
            logger.warning(f"Missing thumbnail_url or track. thumbnail_url={thumbnail_url}, track={track}")
            return False
        
        # Download v√† process thumbnail
        thumbnail_io = download_and_process_thumbnail(thumbnail_url)
        if not thumbnail_io:
            print("‚ùå DEBUG: Could not download thumbnail for track")
            logger.warning("Could not download thumbnail for track")
            return False
        
        # Create filename - s·ª≠ d·ª•ng ID n·∫øu c√≥, ho·∫∑c title n·∫øu ch∆∞a c√≥ ID
        if track.id:
            filename = f"album_cover_{track.id}.jpg"
        else:
            # Fallback: use title for filename
            import re
            safe_title = re.sub(r'[<>:"/\\|?*]', '', track.title)[:50]
            filename = f"album_cover_{safe_title}.jpg"
        
        # Save to track's album_cover field
        track.album_cover.save(filename, ContentFile(thumbnail_io.read()), save=True)
        
        logger.info(f"‚úÖ Thumbnail attached to track: {track.title}")
        return True
        
    except Exception as e:
        logger.error(f"Error attaching thumbnail to track: {str(e)}", exc_info=True)
        return False


def attach_thumbnail_to_playlist(playlist, thumbnail_url):
    """
    Attach thumbnail v√†o playlist/album
    
    Args:
        playlist: UserPlaylist instance
        thumbnail_url: URL c·ªßa thumbnail t·ª´ YouTube
        
    Returns:
        bool: True n·∫øu th√†nh c√¥ng, False n·∫øu l·ªói
    """
    try:
        if not thumbnail_url or not playlist:
            return False
        
        # Download v√† process thumbnail
        thumbnail_io = download_and_process_thumbnail(thumbnail_url)
        if not thumbnail_io:
            logger.warning("Could not download thumbnail for playlist")
            return False
        
        # Create filename
        filename = f"playlist_cover_{playlist.id}.jpg"
        
        # Save to playlist's cover_image field
        playlist.cover_image.save(filename, ContentFile(thumbnail_io.read()), save=True)
        
        logger.info(f"Thumbnail attached to playlist: {playlist.name}")
        return True
        
    except Exception as e:
        logger.error(f"Error attaching thumbnail to playlist: {str(e)}", exc_info=True)
        return False


def _get_cookie_file_path(user=None):
    """L·∫•y ƒë∆∞·ªùng d·∫´n cookie file, ∆∞u ti√™n cookie c·ªßa user, fallback v·ªÅ cookie m·∫∑c ƒë·ªãnh"""
    # ∆Øu ti√™n cookie c·ªßa user n·∫øu c√≥
    if user:
        try:
            from .models import UserYouTubeCookie
            user_cookie = UserYouTubeCookie.objects.filter(user=user, is_active=True).first()
            if user_cookie and user_cookie.is_cookie_valid():
                cookie_path = user_cookie.get_cookie_file_path()
                if cookie_path and os.path.exists(cookie_path):
                    logger.info(f"Using user cookie file: {cookie_path}")
                    return cookie_path
        except Exception as e:
            logger.warning(f"Error accessing user cookie: {e}")
    
    # Fallback v·ªÅ cookie file m·∫∑c ƒë·ªãnh
    default_cookie_path = os.path.join(settings.BASE_DIR, 'music_player', 'youtube_cookies.txt')
    if os.path.exists(default_cookie_path):
        logger.info(f"Using default cookie file: {default_cookie_path}")
        return default_cookie_path
    
    logger.warning("No valid cookie file found")
    return None


def get_duration_formatted(duration):
    """Format duration from seconds to MM:SS"""
    if duration is None or duration == 0:
        return "00:00"
    minutes = duration // 60
    seconds = duration % 60
    return f"{minutes:02d}:{seconds:02d}"


class YouTubeImportView(View):
    """API view ƒë·ªÉ import audio t·ª´ YouTube"""
    
    @method_decorator(csrf_exempt)
    @method_decorator(login_required)
    def dispatch(self, *args, **kwargs):
        return super().dispatch(*args, **kwargs)
    
    def post(self, request):
        """Import audio t·ª´ YouTube URL"""
        try:
            data = json.loads(request.body)
            youtube_url = data.get('url', '').strip()
            playlist_id = data.get('playlist_id')
            extract_audio_only = data.get('extract_audio_only', True)
            import_playlist = data.get('import_playlist', False)  # M·∫∑c ƒë·ªãnh: import file ƒë∆°n l·∫ª
            
            if not youtube_url:
                return JsonResponse({
                    'success': False,
                    'error': 'YouTube URL kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
                }, status=400)
            
            # Validate YouTube URL
            if not self._is_valid_youtube_url(youtube_url):
                return JsonResponse({
                    'success': False,
                    'error': 'URL kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p URL YouTube video ho·∫∑c playlist'
                }, status=400)
            
            # ‚úÖ L∆∞u original URL ƒë·ªÉ logging
            original_url = youtube_url
            
            # Detect if it's a playlist URL (ph√¢n bi·ªát playlist th·ª±c s·ª± vs video v·ªõi radio mode)
            import re
            # Playlist th·ª±c s·ª±: c√≥ /playlist ho·∫∑c c√≥ list= v·ªõi playlist ID (kh√¥ng ph·∫£i radio mode RD...)
            has_list_param = bool(re.search(r'[?&]list=', youtube_url))
            is_radio_mode = bool(re.search(r'[?&]list=RD', youtube_url))
            is_playlist = '/playlist' in youtube_url or (has_list_param and not is_radio_mode)
            
            # ‚úÖ Special handling for radio mode - always treat as single video
            if is_radio_mode:
                logger.info("Radio mode detected in import - treating as single video")
                is_playlist = False
                # Clean radio mode parameters immediately - improved regex
                youtube_url = re.sub(r'[?&]list=[^&]*', '', youtube_url)
                youtube_url = re.sub(r'[?&]start_radio=[^&]*', '', youtube_url)
                youtube_url = re.sub(r'[?&]index=[^&]*', '', youtube_url)
                youtube_url = re.sub(r'[?&]+$', '', youtube_url)
                youtube_url = re.sub(r'\?$', '', youtube_url)  # Remove trailing ?
                logger.info(f"Radio mode URL cleaned in import: {original_url} -> {youtube_url}")
            
            # X·ª≠ l√Ω logic import d·ª±a tr√™n checkbox
            if is_radio_mode and not import_playlist:
                # Radio mode v√† kh√¥ng mu·ªën import playlist - ƒë√£ clean URL ·ªü tr√™n
                logger.info("Radio mode with single video import - URL already cleaned")
            elif is_playlist and not import_playlist:
                # URL l√† playlist nh∆∞ng user kh√¥ng mu·ªën import playlist
                # Chuy·ªÉn th√†nh single video b·∫±ng c√°ch lo·∫°i b·ªè playlist parameter
                if '?list=' in youtube_url:
                    youtube_url = youtube_url.split('?list=')[0]
                elif '/playlist' in youtube_url:
                    # Kh√¥ng th·ªÉ chuy·ªÉn playlist URL th√†nh single video
                    return JsonResponse({
                        'success': False,
                        'error': 'URL n√†y l√† playlist. Vui l√≤ng tick "Import c·∫£ playlist" ho·∫∑c s·ª≠ d·ª•ng URL video ƒë∆°n l·∫ª.'
                    }, status=400)
            elif not is_playlist and import_playlist:
                # URL l√† single video nh∆∞ng user mu·ªën import playlist
                return JsonResponse({
                    'success': False,
                    'error': 'URL n√†y l√† video ƒë∆°n l·∫ª. B·ªè tick "Import c·∫£ playlist" ƒë·ªÉ import video n√†y.'
                }, status=400)
            
            # Check user quota
            user_settings = MusicPlayerSettings.objects.get_or_create(user=request.user)[0]
            if not user_settings.can_upload(0):  # We'll check actual size after download
                return JsonResponse({
                    'success': False,
                    'error': f'B·∫°n ƒë√£ s·ª≠ d·ª•ng h·∫øt quota ({user_settings.storage_quota_mb}MB). Vui l√≤ng li√™n h·ªá admin ƒë·ªÉ m·ªü r·ªông.'
                }, status=400)
            
            # Import t·ª´ YouTube
            result = self._import_from_youtube(
                request.user, 
                youtube_url, 
                playlist_id, 
                extract_audio_only,
                import_playlist
            )
            
            return JsonResponse(result)
            
        except json.JSONDecodeError:
            return JsonResponse({
                'success': False,
                'error': 'D·ªØ li·ªáu JSON kh√¥ng h·ª£p l·ªá'
            }, status=400)
        except Exception as e:
            logger.error(f"YouTube import error: {str(e)}", exc_info=True)
            return JsonResponse({
                'success': False,
                'error': f'L·ªói khi import: {str(e)}'
            }, status=500)
    
    def _is_valid_youtube_url(self, url):
        """Ki·ªÉm tra URL YouTube c√≥ h·ª£p l·ªá kh√¥ng"""
        youtube_domains = [
            'youtube.com', 'www.youtube.com', 'm.youtube.com',
            'youtu.be', 'www.youtu.be'
        ]
        
        for domain in youtube_domains:
            if domain in url:
                return True
        return False
    
    def _check_ffmpeg(self):
        """Ki·ªÉm tra FFmpeg c√≥ s·∫µn kh√¥ng"""
        try:
            import subprocess
            result = subprocess.run(['ffmpeg', '-version'], 
                                  capture_output=True, text=True, timeout=5)
            return result.returncode == 0
        except:
            return False
    
    def _import_from_youtube(self, user, url, playlist_id, extract_audio_only, import_playlist=False):
        """Import audio t·ª´ YouTube URL"""
        user_id = user.id
        
        try:
            # B·∫Øt ƒë·∫ßu import session
            start_import_session(user_id)
            update_import_progress(user_id, 'preparing', 'ƒêang chu·∫©n b·ªã download...', 10)
            
            # Ki·ªÉm tra cancel tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu
            if is_import_cancelled(user_id):
                logger.info(f"Import cancelled before starting for user {user_id}")
                return {
                    'success': False,
                    'error': 'Import ƒë√£ b·ªã h·ªßy',
                    'cancelled': True
                }
            
            # T·∫°o th∆∞ m·ª•c temp ƒë·ªÉ download
            with tempfile.TemporaryDirectory() as temp_dir:
                
                # Custom progress hook ƒë·ªÉ ki·ªÉm tra cancel
                def progress_hook(d):
                    if is_import_cancelled(user_id):
                        logger.info(f"Import cancelled during download for user {user_id}")
                        raise Exception("Import cancelled by user")
                    
                    if d['status'] == 'downloading':
                        # C·∫≠p nh·∫≠t progress
                        downloaded_bytes = d.get('downloaded_bytes', 0)
                        total_bytes = d.get('total_bytes', 0)
                        if total_bytes > 0:
                            percentage = min(90, int((downloaded_bytes / total_bytes) * 80) + 10)  # 10-90%
                            update_import_progress(user_id, 'downloading', f'ƒêang download... {percentage}%', percentage)
                        else:
                            update_import_progress(user_id, 'downloading', 'ƒêang download...', 50)
                    elif d['status'] == 'finished':
                        update_import_progress(user_id, 'processing', 'ƒêang x·ª≠ l√Ω file...', 90)
                
                # C·∫•u h√¨nh yt-dlp v·ªõi t·ªëi ∆∞u ch·ªëng bot detection
                ydl_opts = {
                    # ‚úÖ Format selection th√¥ng minh - ∆∞u ti√™n audio thu·∫ßn t√∫y
                    'format': 'bestaudio[ext=m4a]/bestaudio[ext=webm]/bestaudio[ext=mp3]/bestaudio[ext=ogg]/bestaudio/best',
                    'outtmpl': os.path.join(temp_dir, '%(title)s.%(ext)s'),
                    'writethumbnail': False,  # Disable ƒë·ªÉ tr√°nh l·ªói
                    'writedescription': False,  # Disable ƒë·ªÉ tr√°nh l·ªói
                    'writeinfojson': True,  # ‚úÖ Enable ƒë·ªÉ l·∫•y metadata cho thumbnails
                    'ignoreerrors': True,  # Continue on errors
                    'no_warnings': True,
                    'noplaylist': False,  # Allow playlist download
                    'timeout': 60,        # TƒÉng timeout l√™n 60s
                    'progress_hooks': [progress_hook],  # ‚úÖ Th√™m progress hook ƒë·ªÉ cancel
                    
                    # ‚úÖ Audio quality settings - ch·ªâ khi c√≥ FFmpeg
                    'audioformat': 'mp3',  # Force MP3 output
                    'audioquality': '192',  # 192kbps quality
                    'extractaudio': True,   # Extract audio only
                    'postprocessors': [{
                        'key': 'FFmpegExtractAudio',
                        'preferredcodec': 'mp3',
                        'preferredquality': '192',
                    }] if self._check_ffmpeg() else [],
                    
                    # ‚úÖ Fallback: n·∫øu kh√¥ng c√≥ FFmpeg, ch·ªâ download audio streams
                    'format_sort': ['ext:m4a', 'ext:webm', 'ext:mp3', 'ext:ogg', 'ext:mp4'],
                    'format_sort_force': True,
                    
                    # ‚úÖ Anti-bot detection optimizations
                    'user_agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                    'referer': 'https://www.youtube.com/',
                    'http_headers': {
                        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                        'Accept-Language': 'en-US,en;q=0.5',
                        'Accept-Encoding': 'gzip, deflate',
                        'DNT': '1',
                        'Connection': 'keep-alive',
                        'Upgrade-Insecure-Requests': '1',
                    },
                    
                    # ‚úÖ Rate limiting v√† retry logic
                    'retries': 3,
                    'fragment_retries': 3,
                    'retry_sleep_functions': {'http': lambda n: min(4 ** n, 60)},
                    
                    # ‚úÖ Cookie support v·ªõi fallback
                    'cookiefile': _get_cookie_file_path(user) if os.path.exists(_get_cookie_file_path(user)) else None,
                    
                    # ‚úÖ Throttling ƒë·ªÉ tr√°nh spam
                    'sleep_interval': 1,
                    'max_sleep_interval': 5,
                    
                    # ‚úÖ Extract info optimizations
                    'extract_flat': False,
                    'writesubtitles': False,
                    'writeautomaticsub': False,
                }
                
                # Th√™m postprocessor ch·ªâ khi c√≥ FFmpeg
                try:
                    import subprocess
                    result = subprocess.run(['ffmpeg', '-version'], capture_output=True, check=True, timeout=5)
                    # FFmpeg c√≥ s·∫µn, th√™m postprocessor
                    ydl_opts['postprocessors'] = [{
                        'key': 'FFmpegExtractAudio',
                        'preferredcodec': 'mp3',
                        'preferredquality': '192',
                    }]
                    pass  # FFmpeg c√≥ s·∫µn, th√™m postprocessor
                except (subprocess.CalledProcessError, FileNotFoundError, subprocess.TimeoutExpired):
                    # FFmpeg kh√¥ng c√≥, s·ª≠ d·ª•ng format g·ªëc
                    ydl_opts['format'] = 'bestaudio/best'
                    # Remove postprocessors if they exist
                    if 'postprocessors' in ydl_opts:
                        del ydl_opts['postprocessors']
                
                # Debug logging
                print(f"üîç DEBUG: FFmpeg available: {self._check_ffmpeg()}")
                print(f"üîç DEBUG: ydl_opts format: {ydl_opts['format']}")
                print(f"üîç DEBUG: ydl_opts postprocessors: {ydl_opts.get('postprocessors', [])}")
                
                with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                    # Extract info tr∆∞·ªõc khi download
                    info = ydl.extract_info(url, download=False)
                    
                    if not info:
                        return {
                            'success': False,
                            'error': 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin t·ª´ YouTube URL'
                        }
                    
                    # Ki·ªÉm tra cancel tr∆∞·ªõc khi x·ª≠ l√Ω
                    if is_import_cancelled(user_id):
                        logger.info(f"Import cancelled before processing for user {user_id}")
                        return {
                            'success': False,
                            'error': 'Import ƒë√£ b·ªã h·ªßy',
                            'cancelled': True
                        }
                    
                    # X·ª≠ l√Ω single video ho·∫∑c playlist d·ª±a tr√™n import_playlist
                    if 'entries' not in info or not import_playlist:
                        result = self._process_single_video(user, ydl, info, playlist_id, temp_dir)
                    else:
                        result = self._process_playlist(user, ydl, info, playlist_id, temp_dir)
                    
                    # Ki·ªÉm tra cancel sau khi x·ª≠ l√Ω
                    if is_import_cancelled(user_id):
                        logger.info(f"Import cancelled after processing for user {user_id}")
                        return {
                            'success': False,
                            'error': 'Import ƒë√£ b·ªã h·ªßy',
                            'cancelled': True
                        }
                    
                    # C·∫≠p nh·∫≠t progress ho√†n th√†nh
                    update_import_progress(user_id, 'completed', 'Import ho√†n th√†nh!', 100)
                    return result
                    
        except Exception as e:
            logger.error(f"YouTube import processing error: {str(e)}", exc_info=True)
            
            # Ki·ªÉm tra n·∫øu l·ªói do cancel
            if is_import_cancelled(user_id):
                return {
                    'success': False,
                    'error': 'Import ƒë√£ b·ªã h·ªßy',
                    'cancelled': True
                }
            
            return {
                'success': False,
                'error': f'L·ªói khi x·ª≠ l√Ω: {str(e)}'
            }
        finally:
            # Cleanup session
            end_import_session(user_id)
    
    def _process_single_video(self, user, ydl, info, playlist_id, temp_dir):
        """X·ª≠ l√Ω single video"""
        try:
            # T·∫°o album t·ª´ single video n·∫øu ch∆∞a c√≥ playlist_id
            created_album = None
            if not playlist_id:
                album_name = f"{info.get('uploader', 'Unknown Artist')} - Single"
                created_album = self._create_album_from_playlist(user, album_name, info)
                if created_album:
                    playlist_id = created_album.id
            
            # Download video v·ªõi error handling v√† fallback
            logger.info(f"Starting download for URL: {info['webpage_url']}")
            download_success = False
            
            # Th·ª≠ download v·ªõi format hi·ªán t·∫°i
            try:
                ydl.download([info['webpage_url']])
                logger.info("Download completed successfully")
                download_success = True
            except Exception as download_error:
                logger.error(f"Download failed with current format: {str(download_error)}")
                
                # Fallback: th·ª≠ v·ªõi format ƒë∆°n gi·∫£n h∆°n
                logger.info("Trying fallback format...")
                print(f"üîç DEBUG: Trying fallback - FFmpeg available: {self._check_ffmpeg()}")
                
                # Strategy 1: Th·ª≠ v·ªõi audio-only formats
                fallback_formats = [
                    'worstaudio[ext=mp3]/worstaudio[ext=m4a]/worstaudio[ext=webm]/worstaudio/worst',
                    'worstaudio[ext=m4a]/worstaudio[ext=webm]/worstaudio[ext=mp3]/worstaudio/worst',
                    'worstaudio[ext=webm]/worstaudio[ext=m4a]/worstaudio[ext=mp3]/worstaudio/worst',
                    'worstaudio/worst'  # Last resort
                ]
                
                for i, fallback_format in enumerate(fallback_formats):
                    try:
                        print(f"üîç DEBUG: Trying fallback strategy {i+1}: {fallback_format}")
                        ydl_opts['format'] = fallback_format
                        ydl_opts['audioformat'] = 'mp3'
                        ydl_opts['audioquality'] = '128'
                        
                        ydl = yt_dlp.YoutubeDL(ydl_opts)
                        ydl.download([info['webpage_url']])
                        logger.info(f"Download completed with fallback strategy {i+1}")
                        download_success = True
                        break
                    except Exception as fallback_error:
                        print(f"üîç DEBUG: Fallback strategy {i+1} failed: {str(fallback_error)}")
                        logger.error(f"Fallback strategy {i+1} failed: {str(fallback_error)}")
                        continue
                
                if not download_success:
                    return {
                        'success': False,
                        'error': f'L·ªói download: {str(download_error)}. T·∫•t c·∫£ fallback strategies ƒë·ªÅu th·∫•t b·∫°i.'
                    }
            
            if not download_success:
                return {
                    'success': False,
                    'error': 'Kh√¥ng th·ªÉ download audio t·ª´ video'
                }
            
            # ‚úÖ Debug: List all files in temp directory
            all_files = os.listdir(temp_dir)
            print(f"üîç DEBUG: All files in temp directory: {all_files}")
            logger.info(f"All files in temp directory: {all_files}")
            
            # T√¨m file ƒë√£ download - m·ªü r·ªông format support
            audio_extensions = ('.mp3', '.webm', '.m4a', '.mp4', '.ogg', '.wav')
            downloaded_files = [f for f in all_files if f.lower().endswith(audio_extensions)]
            print(f"üîç DEBUG: Audio files found: {downloaded_files}")
            logger.info(f"Audio files found: {downloaded_files}")
            
            if not downloaded_files:
                logger.error(f"No audio files found in {temp_dir}. All files: {all_files}")
                return {
                    'success': False,
                    'error': f'Kh√¥ng th·ªÉ download audio t·ª´ video. Files trong th∆∞ m·ª•c: {all_files}'
                }
            
            # ‚úÖ Validate downloaded file format
            audio_file = os.path.join(temp_dir, downloaded_files[0])
            file_extension = os.path.splitext(audio_file)[1].lower()
            print(f"üîç DEBUG: Downloaded file extension: {file_extension}")
            
            # ‚úÖ N·∫øu file l√† MP4, th·ª≠ download l·∫°i v·ªõi format kh√°c
            if file_extension == '.mp4' and not self._check_ffmpeg():
                print(f"üîç DEBUG: MP4 detected without FFmpeg - trying alternative download")
                logger.warning("MP4 file downloaded without FFmpeg - trying alternative format")
                
                # X√≥a file MP4 hi·ªán t·∫°i
                try:
                    os.remove(audio_file)
                except:
                    pass
                
                # Th·ª≠ download v·ªõi format audio thu·∫ßn t√∫y
                alternative_formats = [
                    'bestaudio[ext=m4a]/bestaudio[ext=webm]/bestaudio[ext=mp3]/bestaudio[ext=ogg]',
                    'worstaudio[ext=m4a]/worstaudio[ext=webm]/worstaudio[ext=mp3]/worstaudio[ext=ogg]',
                    'bestaudio[ext=webm]/bestaudio[ext=m4a]/bestaudio[ext=mp3]',
                    'worstaudio[ext=webm]/worstaudio[ext=m4a]/worstaudio[ext=mp3]'
                ]
                
                # T·∫°o l·∫°i ydl_opts cho alternative download
                alt_ydl_opts = {
                    'format': '',
                    'outtmpl': os.path.join(temp_dir, '%(title)s.%(ext)s'),
                    'writethumbnail': False,
                    'writedescription': False,
                    'writeinfojson': True,  # ‚úÖ Enable ƒë·ªÉ l·∫•y metadata
                    'ignoreerrors': True,
                    'no_warnings': True,
                    'noplaylist': False,
                    'timeout': 60,
                    'postprocessors': [],  # Disable postprocessors
                    'user_agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                    'referer': 'https://www.youtube.com/',
                    'http_headers': {
                        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                        'Accept-Language': 'en-US,en;q=0.5',
                        'Accept-Encoding': 'gzip, deflate',
                        'DNT': '1',
                        'Connection': 'keep-alive',
                        'Upgrade-Insecure-Requests': '1',
                    },
                    'retries': 3,
                    'fragment_retries': 3,
                    'retry_sleep_functions': {'http': lambda n: min(4 ** n, 60)},
                    'sleep_interval': 1,
                    'max_sleep_interval': 5,
                }
                
                for alt_format in alternative_formats:
                    try:
                        print(f"üîç DEBUG: Trying alternative format: {alt_format}")
                        alt_ydl_opts['format'] = alt_format
                        
                        ydl = yt_dlp.YoutubeDL(alt_ydl_opts)
                        ydl.download([info['webpage_url']])
                        
                        # Ki·ªÉm tra l·∫°i files
                        new_files = os.listdir(temp_dir)
                        new_audio_files = [f for f in new_files if f.lower().endswith(('.mp3', '.webm', '.m4a', '.ogg'))]
                        
                        if new_audio_files:
                            downloaded_files = new_audio_files
                            audio_file = os.path.join(temp_dir, downloaded_files[0])
                            print(f"üîç DEBUG: Alternative download successful: {downloaded_files[0]}")
                            break
                    except Exception as alt_error:
                        print(f"üîç DEBUG: Alternative format failed: {str(alt_error)}")
                        continue
            
            # ‚úÖ Validate audio file tr∆∞·ªõc khi t·∫°o UserTrack
            logger.info(f"Validating audio file: {audio_file}")
            if not os.path.exists(audio_file):
                logger.error(f"Audio file does not exist: {audio_file}")
                return {
                    'success': False,
                    'error': 'File audio kh√¥ng t·ªìn t·∫°i sau khi download'
                }
            
            file_size = os.path.getsize(audio_file)
            logger.info(f"Audio file size: {file_size} bytes")
            
            if file_size == 0:
                logger.error(f"Audio file is empty: {audio_file}")
                return {
                    'success': False,
                    'error': 'File audio r·ªóng sau khi download'
                }
            
            if file_size < 1024:  # Less than 1KB
                logger.error(f"Audio file too small: {audio_file} ({file_size} bytes)")
                return {
                    'success': False,
                    'error': 'File audio qu√° nh·ªè, c√≥ th·ªÉ b·ªã l·ªói download'
                }
            
            # T·∫°o UserTrack
            track = self._create_user_track(user, info, audio_file, playlist_id, None)
            
            if track:
                return {
                    'success': True,
                    'message': f'Import th√†nh c√¥ng: {track.title}',
                    'track': {
                        'id': track.id,
                        'title': track.title,
                        'artist': track.artist,
                        'album': track.album,
                        'duration': track.duration,
                        'file_size': track.file_size
                    },
                    'album': {
                        'id': created_album.id if created_album else playlist_id,
                        'name': created_album.name if created_album else 'Existing Playlist',
                        'created': created_album is not None
                    } if created_album or playlist_id else None
                }
            else:
                return {
                    'success': False,
                    'error': 'Kh√¥ng th·ªÉ t·∫°o track t·ª´ file audio'
                }
                
        except Exception as e:
            logger.error(f"Single video processing error: {str(e)}", exc_info=True)
            return {
                'success': False,
                'error': f'L·ªói khi x·ª≠ l√Ω video: {str(e)}'
            }
    
    def _process_playlist(self, user, ydl, info, playlist_id, temp_dir):
        """X·ª≠ l√Ω playlist"""
        try:
            entries = info.get('entries', [])
            if not entries:
                return {
                    'success': False,
                    'error': 'Playlist kh√¥ng c√≥ video n√†o'
                }
            
            # ‚úÖ Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng video import ƒë·ªÉ tr√°nh timeout
            MAX_IMPORT_VIDEOS = 30  # Gi·ªõi h·∫°n 30 video ƒë·ªÉ tr√°nh timeout
            if len(entries) > MAX_IMPORT_VIDEOS:
                logger.warning(f"Playlist c√≥ {len(entries)} video, gi·ªõi h·∫°n import {MAX_IMPORT_VIDEOS} video ƒë·∫ßu ti√™n")
                entries = entries[:MAX_IMPORT_VIDEOS]
            
            # T·∫°o album (playlist) t·ª´ YouTube playlist n·∫øu ch∆∞a c√≥ playlist_id
            created_album = None
            if not playlist_id:
                album_name = info.get('title', 'YouTube Import')
                created_album = self._create_album_from_playlist(user, album_name, info)
                if created_album:
                    playlist_id = created_album.id
            
            # Download t·∫•t c·∫£ videos trong playlist
            ydl.download([info['webpage_url']])
            
            # T√¨m t·∫•t c·∫£ files ƒë√£ download (∆∞u ti√™n mp3)
            all_files = os.listdir(temp_dir)
            downloaded_files = []
            
            # ∆Øu ti√™n mp3 files, sau ƒë√≥ m4a, cu·ªëi c√πng l√† webm
            mp3_files = [f for f in all_files if f.endswith('.mp3')]
            m4a_files = [f for f in all_files if f.endswith('.m4a')]
            webm_files = [f for f in all_files if f.endswith('.webm')]
            
            if mp3_files:
                downloaded_files = mp3_files
            elif m4a_files:
                downloaded_files = m4a_files
            else:
                downloaded_files = webm_files
            
            if not downloaded_files:
                return {
                    'success': False,
                    'error': 'Kh√¥ng th·ªÉ download audio t·ª´ playlist'
                }
            
            # T·∫°o tracks cho t·∫•t c·∫£ files
            created_tracks = []
            errors = []
            
            for i, filename in enumerate(downloaded_files):
                try:
                    audio_file = os.path.join(temp_dir, filename)
                    
                    # L·∫•y info t·ª´ file info.json n·∫øu c√≥
                    info_file = os.path.join(temp_dir, filename.replace('.webm', '.info.json').replace('.mp3', '.info.json').replace('.m4a', '.info.json'))
                    video_info = None
                    
                    if os.path.exists(info_file) and os.path.getsize(info_file) > 0:
                        try:
                            with open(info_file, 'r', encoding='utf-8') as f:
                                content = f.read().strip()
                                if content:
                                    video_info = json.loads(content)
                                    logger.info(f"‚úÖ Loaded video info for {filename}: {video_info.get('title', 'Unknown')}")
                        except Exception as e:
                            logger.error(f"Error loading video info: {str(e)}")
                    
                    # T·∫°o UserTrack v·ªõi playlist info l√†m album
                    track = self._create_user_track(user, video_info, audio_file, playlist_id, info)
                    
                    logger.info(f"‚úÖ Created track: {track.title if track else 'Failed'} with thumbnail: {video_info.get('thumbnail') if video_info and track else 'None'}")
                    
                    if track:
                        created_tracks.append({
                            'id': track.id,
                            'title': track.title,
                            'artist': track.artist,
                            'album': track.album,
                            'duration': track.duration,
                            'file_size': track.file_size
                        })
                    else:
                        errors.append(f"Kh√¥ng th·ªÉ t·∫°o track cho {filename}")
                    
                except Exception as e:
                    error_msg = f"L·ªói v·ªõi file {filename}: {str(e)}"
                    errors.append(error_msg)
                    logger.error(f"Playlist track processing error for {filename}: {str(e)}", exc_info=True)
            
            # ‚úÖ Th√¥ng b√°o v·ªÅ gi·ªõi h·∫°n import
            original_count = len(info.get('entries', []))
            imported_count = len(created_tracks)
            limit_message = ""
            if original_count > MAX_IMPORT_VIDEOS:
                limit_message = f" (Gi·ªõi h·∫°n {MAX_IMPORT_VIDEOS}/{original_count} video ƒë·ªÉ tr√°nh timeout)"
            
            return {
                'success': True,
                'message': f'Import th√†nh c√¥ng {imported_count}/{len(downloaded_files)} tracks t·ª´ playlist{limit_message}',
                'tracks': created_tracks,
                'errors': errors if errors else None,
                'album': {
                    'id': created_album.id if created_album else playlist_id,
                    'name': created_album.name if created_album else 'Existing Playlist',
                    'created': created_album is not None
                } if created_album or playlist_id else None,
                'limit_info': {
                    'original_count': original_count,
                    'imported_count': imported_count,
                    'max_limit': MAX_IMPORT_VIDEOS,
                    'was_limited': original_count > MAX_IMPORT_VIDEOS
                } if original_count > MAX_IMPORT_VIDEOS else None
            }
            
        except Exception as e:
            logger.error(f"Playlist processing error: {str(e)}", exc_info=True)
            return {
                'success': False,
                'error': f'L·ªói khi x·ª≠ l√Ω playlist: {str(e)}'
            }
    
    def _create_album_from_playlist(self, user, album_name, playlist_info):
        """T·∫°o album (playlist) t·ª´ YouTube playlist"""
        try:
            from .models import UserPlaylist
            
            # T·∫°o t√™n album unique
            base_name = album_name
            counter = 1
            while UserPlaylist.objects.filter(user=user, name=album_name).exists():
                album_name = f"{base_name} ({counter})"
                counter += 1
            
            # T·∫°o album
            album = UserPlaylist.objects.create(
                user=user,
                name=album_name,
                description=f"Album ƒë∆∞·ª£c t·∫°o t·ª´ YouTube playlist: {playlist_info.get('title', 'Unknown')}",
                is_public=False,
                is_active=True
            )
            
            # G·∫Øn thumbnail t·ª´ YouTube playlist
            thumbnail_url = playlist_info.get('thumbnail')
            if thumbnail_url:
                attach_thumbnail_to_playlist(album, thumbnail_url)
            
            return album
            
        except Exception as e:
            logger.error(f"Error creating album: {str(e)}", exc_info=True)
            return None
    
    def _create_user_track(self, user, video_info, audio_file_path, playlist_id, playlist_info=None):
        """T·∫°o UserTrack t·ª´ file audio v√† metadata"""
        print(f"üîç DEBUG: Starting _create_user_track with file: {audio_file_path}")
        try:
            # L·∫•y metadata t·ª´ video info ho·∫∑c filename
            if video_info:
                title = video_info.get('title', 'Unknown Title')
                uploader = video_info.get('uploader', 'Unknown Artist')
                upload_date = video_info.get('upload_date', '')
                thumbnail_url = video_info.get('thumbnail')
                
                # ‚úÖ DEBUG: Log thumbnail_url t·ª´ video_info
                print(f"üîç DEBUG: Extracted thumbnail_url from video_info: {thumbnail_url}")
                logger.info(f"üîç DEBUG: Extracted thumbnail_url from video_info: {thumbnail_url}")
                logger.info(f"üîç DEBUG: video_info keys: {list(video_info.keys())}")
                
                # Check if 'thumbnail' is in video_info
                if 'thumbnail' in video_info:
                    print(f"üîç DEBUG: thumbnail key exists in video_info: {video_info['thumbnail']}")
                    logger.info(f"üîç DEBUG: thumbnail key exists in video_info: {video_info['thumbnail']}")
                else:
                    print("‚ùå DEBUG: thumbnail key NOT found in video_info")
                    logger.warning("thumbnail key NOT found in video_info")
                    logger.info(f"Available keys: {list(video_info.keys())}")
            else:
                # Fallback: extract t·ª´ filename
                filename = os.path.basename(audio_file_path)
                title, uploader = self._extract_metadata_from_filename(filename)
                upload_date = ''
                thumbnail_url = '' # No thumbnail in filename fallback
                print(f"‚ùå DEBUG: No video_info, using filename fallback")
                logger.warning(f"No video_info, using filename fallback")
            
            # Clean title (lo·∫°i b·ªè k√Ω t·ª± kh√¥ng h·ª£p l·ªá)
            title = self._clean_title(title)
            
            # T·∫°o album name t·ª´ playlist ho·∫∑c uploader
            if playlist_info:
                album = playlist_info.get('title', 'YouTube Playlist')
            else:
                album = f"{uploader} - {upload_date[:4]}" if upload_date else uploader
            
            # ƒê·ªçc file size
            file_size = os.path.getsize(audio_file_path)
            
            # Check quota tr∆∞·ªõc khi t·∫°o track
            user_settings = MusicPlayerSettings.objects.get(user=user)
            if not user_settings.can_upload(file_size):
                error_msg = f'File qu√° l·ªõn ({file_size / (1024*1024):.2f}MB). Quota c√≤n l·∫°i: {user_settings.get_upload_usage()["remaining"]:.2f}MB'
                logger.error(error_msg)
                raise Exception(error_msg)
            
            
            # ƒê·ªçc duration t·ª´ file
            duration = self._get_audio_duration(audio_file_path, video_info)
            
            # T·∫°o filename an to√†n v·ªõi extension g·ªëc
            safe_filename = self._create_safe_filename(title, uploader, audio_file_path)
            print(f"üîç DEBUG: Original file: {audio_file_path}")
            print(f"üîç DEBUG: Safe filename: {safe_filename}")
            print(f"üîç DEBUG: Original extension: {os.path.splitext(audio_file_path)[1]}")
            print(f"üîç DEBUG: Safe filename extension: {os.path.splitext(safe_filename)[1]}")
            logger.info(f"Original file: {audio_file_path}")
            logger.info(f"Safe filename: {safe_filename}")
            logger.info(f"Original extension: {os.path.splitext(audio_file_path)[1]}")
            logger.info(f"Safe filename extension: {os.path.splitext(safe_filename)[1]}")
            
            # Upload file v·ªõi extension g·ªëc
            with open(audio_file_path, 'rb') as f:
                # ‚úÖ ƒê·∫£m b·∫£o Django File s·ª≠ d·ª•ng ƒë√∫ng extension
                django_file = File(f, name=safe_filename)
                
                with transaction.atomic():
                    # T·∫°o UserTrack
                    track = UserTrack.objects.create(
                        user=user,
                        title=title,
                        artist=uploader,
                        album=album,
                        file=django_file,
                        file_size=file_size,
                        duration=duration,
                        play_count=0,  # ‚úÖ ƒê·∫£m b·∫£o play_count = 0
                        is_active=True
                    )
                    
                    # ‚úÖ Ensure track is saved before attaching thumbnail
                    track.refresh_from_db()
                    
                    # ‚úÖ Debug: Log file path sau khi t·∫°o
                    print(f"üîç DEBUG: Created track with file path: {track.file.path}")
                    print(f"üîç DEBUG: File extension: {os.path.splitext(track.file.path)[1]}")
                    logger.info(f"Created track with file path: {track.file.path}")
                    logger.info(f"File extension: {os.path.splitext(track.file.path)[1]}")
                    
                    # Th√™m v√†o playlist n·∫øu c√≥
                    if playlist_id:
                        try:
                            playlist = UserPlaylist.objects.get(id=playlist_id, user=user)
                            UserPlaylistTrack.objects.create(
                                playlist=playlist,
                                user_track=track,
                                order=playlist.tracks.count() + 1
                            )
                        except UserPlaylist.DoesNotExist:
                            pass
                    
                    # ‚úÖ G·∫Øn thumbnail v√†o track - SAU KHI track ƒë√£ c√≥ ID
                    print(f"üîç DEBUG: Checking thumbnail_url before attachment: {thumbnail_url}")
                    logger.info(f"üîç DEBUG: Checking thumbnail_url before attachment: {thumbnail_url}")
                    
                    if thumbnail_url:
                        print(f"üîç DEBUG: Attaching thumbnail to track ID: {track.id}, URL: {thumbnail_url}")
                        logger.info(f"üîç DEBUG: Attaching thumbnail to track ID: {track.id}, URL: {thumbnail_url}")
                        result = attach_thumbnail_to_track(track, thumbnail_url)
                        print(f"üîç DEBUG: Thumbnail attachment result: {result}")
                        logger.info(f"üîç DEBUG: Thumbnail attachment result: {result}")
                    else:
                        print("‚ùå DEBUG: thumbnail_url is empty, skipping attachment")
                        logger.warning("thumbnail_url is empty, skipping attachment")
                    
                    return track
                    
        except Exception as e:
            print(f"‚ùå ERROR: Create user track error: {str(e)}")
            logger.error(f"Create user track error: {str(e)}", exc_info=True)
            return None
    
    def _extract_metadata_from_filename(self, filename):
        """Extract title v√† artist t·ª´ filename"""
        try:
            # Remove extension
            name = os.path.splitext(filename)[0]
            
            # Common patterns in YouTube filenames
            patterns = [
                r'^(.+?)\s*-\s*(.+?)\s*ft\s*(.+)$',  # "Title - Artist ft Other"
                r'^(.+?)\s*-\s*(.+)$',                # "Title - Artist"
                r'^(.+?)\s*by\s*(.+)$',              # "Title by Artist"
                r'^(.+?)\s*\|\s*(.+)$',              # "Title | Artist"
            ]
            
            import re
            for pattern in patterns:
                match = re.match(pattern, name, re.IGNORECASE)
                if match:
                    if len(match.groups()) == 3:  # "Title - Artist ft Other"
                        title = match.group(1).strip()
                        artist = f"{match.group(2).strip()} ft {match.group(3).strip()}"
                    else:  # "Title - Artist" or "Title by Artist"
                        title = match.group(1).strip()
                        artist = match.group(2).strip()
                    
                    # Clean up common YouTube suffixes
                    title = re.sub(r'\s*Official\s*MV.*$', '', title, flags=re.IGNORECASE)
                    title = re.sub(r'\s*4K.*$', '', title, flags=re.IGNORECASE)
                    title = re.sub(r'\s*HD.*$', '', title, flags=re.IGNORECASE)
                    
                    return title, artist
            
            # Fallback: use filename as title
            return name, 'Unknown Artist'
            
        except Exception as e:
            return filename, 'Unknown Artist'
    
    def _clean_title(self, title):
        """L√†m s·∫°ch title"""
        # Lo·∫°i b·ªè k√Ω t·ª± kh√¥ng h·ª£p l·ªá
        import re
        title = re.sub(r'[<>:"/\\|?*]', '', title)
        title = title.strip()
        
        # Gi·ªõi h·∫°n ƒë·ªô d√†i
        if len(title) > 200:
            title = title[:200].strip()
        
        return title or 'Unknown Title'
    
    def _create_safe_filename(self, title, artist, original_file_path=None):
        """T·∫°o filename an to√†n v·ªõi extension g·ªëc"""
        import re
        from datetime import datetime
        
        # Combine title v√† artist
        filename = f"{artist} - {title}" if artist else title
        
        # Lo·∫°i b·ªè k√Ω t·ª± kh√¥ng h·ª£p l·ªá
        filename = re.sub(r'[<>:"/\\|?*]', '', filename)
        filename = re.sub(r'[^\w\s-]', '', filename)
        filename = re.sub(r'[-\s]+', '_', filename)
        filename = filename.strip('_')
        
        # Gi·ªõi h·∫°n ƒë·ªô d√†i
        if len(filename) > 100:
            filename = filename[:100].strip('_')
        
        # ‚úÖ Gi·ªØ nguy√™n extension g·ªëc n·∫øu c√≥
        if original_file_path and os.path.exists(original_file_path):
            original_ext = os.path.splitext(original_file_path)[1]
            if original_ext:
                extension = original_ext
            else:
                extension = '.mp3'  # Fallback
        else:
            extension = '.mp3'  # Default
        
        # Th√™m timestamp ƒë·ªÉ tr√°nh tr√πng
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f"{filename}_{timestamp}{extension}"
        
        return filename
    
    def _get_audio_duration(self, file_path, video_info=None):
        """L·∫•y duration t·ª´ file audio v·ªõi multiple fallbacks"""
        
        # Method 0: S·ª≠ d·ª•ng duration t·ª´ video_info n·∫øu c√≥ (∆∞u ti√™n cao nh·∫•t)
        if video_info and video_info.get('duration'):
            duration = int(video_info.get('duration'))
            return duration
        
        # Method 1: S·ª≠ d·ª•ng mutagen (t·ªët nh·∫•t cho MP3/M4A)
        try:
            from mutagen import File as MutagenFile
            audio_file = MutagenFile(file_path)
            if audio_file and hasattr(audio_file, 'info') and audio_file.info.length:
                duration = int(audio_file.info.length)
                return duration
        except Exception as e:
            pass
        
        # Method 2: S·ª≠ d·ª•ng get_audio_duration t·ª´ utils
        try:
            from .utils import get_audio_duration
            duration = get_audio_duration(file_path)
            if duration > 0:
                return duration
        except Exception as e:
            pass
        
        # Method 3: S·ª≠ d·ª•ng ffprobe n·∫øu c√≥
        try:
            import subprocess
            result = subprocess.run([
                'ffprobe', '-v', 'quiet', '-show_entries', 'format=duration',
                '-of', 'csv=p=0', file_path
            ], capture_output=True, text=True, timeout=10)
            if result.returncode == 0 and result.stdout.strip():
                duration = int(float(result.stdout.strip()))
                return duration
        except Exception as e:
            pass
        
        # Method 4: S·ª≠ d·ª•ng mutagen v·ªõi different approach
        try:
            from mutagen import File as MutagenFile
            audio_file = MutagenFile(file_path)
            if audio_file:
                # Try different ways to get duration
                if hasattr(audio_file, 'info') and audio_file.info:
                    if hasattr(audio_file.info, 'length') and audio_file.info.length:
                        duration = int(audio_file.info.length)
                        return duration
                
                # Try to get duration from tags
                if hasattr(audio_file, 'tags') and audio_file.tags:
                    for tag in ['length', 'duration', 'DURATION']:
                        if tag in audio_file.tags:
                            try:
                                duration = int(float(audio_file.tags[tag][0]))
                                return duration
                            except:
                                continue
        except Exception as e:
            pass
        
        # Fallback: Return 180s only as last resort
        return 180  # Default 3 minutes
    
    def format_duration(self, seconds):
        """Format duration th√†nh mm:ss"""
        minutes = seconds // 60
        seconds = seconds % 60
        return f"{minutes}:{seconds:02d}"


@csrf_exempt
@require_POST
@login_required
def get_youtube_import_progress(request):
    """API endpoint ƒë·ªÉ l·∫•y ti·∫øn tr√¨nh import"""
    try:
        # T·∫°m th·ªùi return progress gi·∫£
        # TODO: Implement real progress tracking
        return JsonResponse({
            'success': True,
            'progress': 50,
            'status': 'downloading',
            'message': 'ƒêang download audio...'
        })
    except Exception as e:
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)


@csrf_exempt
@require_POST
@login_required
def get_youtube_info(request):
    """L·∫•y th√¥ng tin video/playlist t·ª´ YouTube URL m√† kh√¥ng download"""
    try:
        data = json.loads(request.body)
        url = data.get('url', '').strip()
        import_playlist = data.get('import_playlist', False)  # M·∫∑c ƒë·ªãnh: import file ƒë∆°n l·∫ª
        user = request.user
        
        logger.info(f"YouTube info request from user {user.username}: URL={url}, import_playlist={import_playlist}")
        
        if not url:
            logger.warning("Empty URL provided")
            return JsonResponse({
                'success': False,
                'error': 'URL kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'
            }, status=400)
        
        # Log original URL for debugging
        original_url = url
        
        # Detect if it's a playlist URL (ph√¢n bi·ªát playlist th·ª±c s·ª± vs video v·ªõi radio mode)
        import re
        # Playlist th·ª±c s·ª±: c√≥ /playlist ho·∫∑c c√≥ list= v·ªõi playlist ID (kh√¥ng ph·∫£i radio mode RD...)
        has_list_param = bool(re.search(r'[?&]list=', url))
        is_radio_mode = bool(re.search(r'[?&]list=RD', url))
        is_playlist = '/playlist' in url or (has_list_param and not is_radio_mode)
        
        # ‚úÖ Special handling for radio mode - always treat as single video
        if is_radio_mode:
            logger.info("Radio mode detected - treating as single video")
            is_playlist = False
            # Clean radio mode parameters immediately - improved regex
            url = re.sub(r'[?&]list=[^&]*', '', url)
            url = re.sub(r'[?&]start_radio=[^&]*', '', url)
            url = re.sub(r'[?&]index=[^&]*', '', url)
            url = re.sub(r'[?&]+$', '', url)
            url = re.sub(r'\?$', '', url)  # Remove trailing ?
            logger.info(f"Radio mode URL cleaned: {original_url} -> {url}")
        
        logger.info(f"URL analysis: has_list_param={has_list_param}, is_radio_mode={is_radio_mode}, is_playlist={is_playlist}")
        
        # ‚úÖ X·ª≠ l√Ω logic preview d·ª±a tr√™n checkbox v√† radio mode
        if is_radio_mode and not import_playlist:
            # Radio mode v√† kh√¥ng mu·ªën import playlist - ƒë√£ clean URL ·ªü tr√™n
            logger.info("Radio mode with single video import - URL already cleaned")
        elif is_playlist and not import_playlist:
            # URL l√† playlist nh∆∞ng user kh√¥ng mu·ªën import playlist
            # Chuy·ªÉn th√†nh single video b·∫±ng c√°ch lo·∫°i b·ªè playlist parameter
            if '?list=' in url:
                url = url.split('?list=')[0]
            elif '/playlist' in url:
                # Kh√¥ng th·ªÉ chuy·ªÉn playlist URL th√†nh single video
                return JsonResponse({
                    'success': False,
                    'error': 'URL n√†y l√† playlist. Vui l√≤ng tick "Import c·∫£ playlist" ho·∫∑c s·ª≠ d·ª•ng URL video ƒë∆°n l·∫ª.'
                }, status=400)
        elif not is_playlist and ('&list=' in url or '?list=' in url) and not import_playlist:
            # URL c√≥ &list= ho·∫∑c ?list= (radio mode) nh∆∞ng user kh√¥ng mu·ªën import playlist
            # Lo·∫°i b·ªè c√°c parameter li√™n quan ƒë·∫øn playlist/radio
            # Lo·∫°i b·ªè &list= v√† ?list= v√† &start_radio= parameters
            url = re.sub(r'[?&]list=[^&]*', '', url)
            url = re.sub(r'&start_radio=[^&]*', '', url)
            # Clean up any remaining ? or & at the end
            url = re.sub(r'[?&]+$', '', url)
            logger.info(f"URL cleaned from radio mode: {original_url} -> {url}")
        elif not is_playlist and import_playlist:
            # URL l√† single video nh∆∞ng user mu·ªën import playlist
            return JsonResponse({
                'success': False,
                'error': 'URL n√†y l√† video ƒë∆°n l·∫ª. B·ªè tick "Import c·∫£ playlist" ƒë·ªÉ import video n√†y.'
            }, status=400)
        
        # C·∫•u h√¨nh yt-dlp ƒë·ªÉ extract info v·ªõi t·ªëi ∆∞u ch·ªëng bot detection
        cookie_path = _get_cookie_file_path(user)
        logger.info(f"Using cookie file: {cookie_path}")
        
        ydl_opts = {
            'quiet': True,
            'no_warnings': True,
            'noplaylist': False,  # Allow playlist info extraction
            'extract_flat': False, # Extract full info for better metadata
            'timeout': 15,        # 15 second timeout
            
            # ‚úÖ Anti-bot detection optimizations
            'user_agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'referer': 'https://www.youtube.com/',
            'http_headers': {
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                'Accept-Language': 'en-US,en;q=0.5',
                'Accept-Encoding': 'gzip, deflate',
                'DNT': '1',
                'Connection': 'keep-alive',
                'Upgrade-Insecure-Requests': '1',
            },
            
            # ‚úÖ Rate limiting v√† retry logic
            'retries': 2,
            'fragment_retries': 2,
            'retry_sleep_functions': {'http': lambda n: min(2 ** n, 10)},
            
            # ‚úÖ Cookie support
            'cookiefile': cookie_path,
            
            # ‚úÖ Throttling ƒë·ªÉ tr√°nh spam
            'sleep_interval': 0.5,
            'max_sleep_interval': 2,
        }
        
        logger.info(f"Final URL for yt-dlp: {url}")
        logger.info(f"yt-dlp options: {ydl_opts}")
        logger.info(f"Starting yt-dlp extraction for URL: {url}")
        
        info = None
        try:
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                # Th√™m timeout cho yt-dlp extraction (Windows compatible)
                import threading
                import time
                
                info = None
                error = None
                
                def extract_info():
                    nonlocal info, error
                    try:
                        info = ydl.extract_info(url, download=False)
                    except Exception as e:
                        error = e
                
                # Ch·∫°y extraction trong thread ri√™ng
                thread = threading.Thread(target=extract_info)
                thread.daemon = True
                thread.start()
                
                # ƒê·ª£i t·ªëi ƒëa 25 gi√¢y
                thread.join(timeout=25)
                
                if thread.is_alive():
                    logger.error("yt-dlp extraction timeout after 25 seconds")
                    return JsonResponse({
                        'success': False,
                        'error': 'Timeout khi l·∫•y th√¥ng tin t·ª´ YouTube. Vui l√≤ng th·ª≠ l·∫°i.'
                    }, status=408)
                
                if error:
                    logger.error(f"yt-dlp extraction error: {str(error)}", exc_info=True)
                    return JsonResponse({
                        'success': False,
                        'error': f'L·ªói yt-dlp: {str(error)}'
                    }, status=500)
                
                logger.info(f"yt-dlp extraction completed. Info keys: {list(info.keys()) if info else 'None'}")
        except Exception as e:
            logger.error(f"yt-dlp wrapper error: {str(e)}", exc_info=True)
            return JsonResponse({
                'success': False,
                'error': f'L·ªói kh·ªüi t·∫°o yt-dlp: {str(e)}'
            }, status=500)
            
        # X·ª≠ l√Ω k·∫øt qu·∫£ n·∫øu kh√¥ng c√≥ l·ªói
        if not info:
            logger.error("yt-dlp returned no info")
            return JsonResponse({
                'success': False,
                'error': 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin t·ª´ URL'
            }, status=400)
            
        # X·ª≠ l√Ω single video ho·∫∑c playlist d·ª±a tr√™n import_playlist
        if 'entries' not in info or not import_playlist:
            # Single video ho·∫∑c kh√¥ng mu·ªën import playlist
            logger.info("Processing as single video")
            logger.info(f"Video info: title={info.get('title')}, uploader={info.get('uploader')}, duration={info.get('duration')}")
            
            return JsonResponse({
                'success': True,
                'info': {
                    'type': 'video',
                    'id': info.get('id'),
                    'title': info.get('title', 'Unknown'),
                    'uploader': info.get('uploader', 'Unknown'),
                    'duration': info.get('duration', 0),
                    'duration_formatted': get_duration_formatted(info.get('duration', 0)),
                    'thumbnail': info.get('thumbnail', ''),
                    'webpage_url': info.get('webpage_url', url),
                    'import_mode': 'single'  # Th√™m flag ƒë·ªÉ frontend bi·∫øt
                }
            })
        else:
            # Playlist v√† mu·ªën import playlist
            logger.info("Processing as playlist")
            entries = info.get('entries', [])
            logger.info(f"Playlist has {len(entries)} entries")
            
            videos_info = []
            
            for i, entry in enumerate(entries[:10]):  # Ch·ªâ l·∫•y 10 videos ƒë·∫ßu ƒë·ªÉ preview
                if entry:
                    logger.info(f"Processing entry {i}: {entry.get('title', 'Unknown') if isinstance(entry, dict) else 'Flat entry'}")
                    
                    # Handle both flat and full extraction
                    if isinstance(entry, dict):
                        video_data = {
                            'id': entry.get('id'),
                            'title': entry.get('title', 'Unknown'),
                            'uploader': entry.get('uploader', 'Unknown'),
                            'duration': entry.get('duration', 0),
                            'duration_formatted': get_duration_formatted(entry.get('duration', 0)),
                            'thumbnail': entry.get('thumbnail', ''),
                            'webpage_url': entry.get('url', entry.get('webpage_url', '')),
                        }
                    else:
                        # Fallback for flat extraction
                        video_data = {
                            'id': str(entry),
                            'title': 'Unknown',
                            'uploader': 'Unknown',
                            'duration': 0,
                            'duration_formatted': '00:00',
                            'thumbnail': '',
                            'webpage_url': '',
                        }
                    
                    videos_info.append(video_data)
            
            logger.info(f"Returning playlist info with {len(videos_info)} videos")
            
            # ‚úÖ C·∫£nh b√°o cho playlist l·ªõn
            warning_message = None
            if len(entries) > 50:
                warning_message = f"C·∫£nh b√°o: Playlist c√≥ {len(entries)} video. Import s·∫Ω m·∫•t r·∫•t nhi·ªÅu th·ªùi gian v√† c√≥ th·ªÉ timeout. Khuy·∫øn ngh·ªã import playlist nh·ªè h∆°n (< 50 video)."
            elif len(entries) > 20:
                warning_message = f"Playlist c√≥ {len(entries)} video. Import s·∫Ω m·∫•t v√†i ph√∫t."
            
            return JsonResponse({
                'success': True,
                'info': {
                    'type': 'playlist',
                    'id': info.get('id'),
                    'title': info.get('title', 'Unknown Playlist'),
                    'uploader': info.get('uploader', 'Unknown'),
                    'entry_count': len(entries),
                    'thumbnail': info.get('thumbnail', ''),
                    'webpage_url': info.get('webpage_url', url),
                    'entries': videos_info,
                    'import_mode': 'playlist',  # Th√™m flag ƒë·ªÉ frontend bi·∫øt
                    'warning': warning_message  # ‚úÖ Th√™m c·∫£nh b√°o
                }
            })
            
    except Exception as e:
        logger.error(f"YouTube info extraction error: {str(e)}", exc_info=True)
        return JsonResponse({
            'success': False,
            'error': f'L·ªói khi l·∫•y th√¥ng tin: {str(e)}'
        }, status=500)


@csrf_exempt
@require_POST
@login_required
def upload_youtube_cookie(request):
    """API endpoint ƒë·ªÉ upload cookie file c·ªßa user"""
    try:
        if 'cookie_file' not in request.FILES:
            return JsonResponse({
                'success': False,
                'error': 'Vui l√≤ng ch·ªçn file cookie'
            }, status=400)
        
        cookie_file = request.FILES['cookie_file']
        
        # Validate file type
        if not cookie_file.name.endswith('.txt'):
            return JsonResponse({
                'success': False,
                'error': 'File cookie ph·∫£i c√≥ ƒë·ªãnh d·∫°ng .txt'
            }, status=400)
        
        # Validate file size (max 1MB)
        if cookie_file.size > 1024 * 1024:
            return JsonResponse({
                'success': False,
                'error': 'File cookie qu√° l·ªõn (t·ªëi ƒëa 1MB)'
            }, status=400)
        
        # Validate cookie content
        try:
            content = cookie_file.read().decode('utf-8')
            cookie_file.seek(0)  # Reset file pointer
            
            # Ki·ªÉm tra c√≥ ph·∫£i Netscape cookie format kh√¥ng
            if not ('youtube.com' in content and 
                   any(cookie in content for cookie in ['SID', 'HSID', 'SSID', 'APISID', 'SAPISID'])):
                return JsonResponse({
                    'success': False,
                    'error': 'File cookie kh√¥ng h·ª£p l·ªá. Vui l√≤ng export cookie t·ª´ tr√¨nh duy·ªát v·ªõi domain youtube.com'
                }, status=400)
                
        except UnicodeDecodeError:
            return JsonResponse({
                'success': False,
                'error': 'File cookie kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng UTF-8'
            }, status=400)
        
        # L∆∞u cookie file
        from .models import UserYouTubeCookie
        
        # X√≥a cookie c≈© n·∫øu c√≥
        UserYouTubeCookie.objects.filter(user=request.user).delete()
        
        # T·∫°o cookie m·ªõi
        user_cookie = UserYouTubeCookie.objects.create(
            user=request.user,
            cookie_file=cookie_file,
            is_active=True
        )
        
        return JsonResponse({
            'success': True,
            'message': 'Cookie file ƒë√£ ƒë∆∞·ª£c upload th√†nh c√¥ng!',
            'cookie_id': user_cookie.id,
            'is_valid': user_cookie.is_cookie_valid()
        })
        
    except Exception as e:
        logger.error(f"YouTube cookie upload error: {str(e)}", exc_info=True)
        return JsonResponse({
            'success': False,
            'error': f'L·ªói khi upload cookie: {str(e)}'
        }, status=500)


@csrf_exempt
@require_POST
@login_required
def delete_youtube_cookie(request):
    """API endpoint ƒë·ªÉ x√≥a cookie file c·ªßa user"""
    try:
        from .models import UserYouTubeCookie
        
        user_cookie = UserYouTubeCookie.objects.filter(user=request.user).first()
        if user_cookie:
            user_cookie.delete()
            return JsonResponse({
                'success': True,
                'message': 'Cookie file ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!'
            })
        else:
            return JsonResponse({
                'success': False,
                'error': 'Kh√¥ng t√¨m th·∫•y cookie file ƒë·ªÉ x√≥a'
            }, status=404)
            
    except Exception as e:
        logger.error(f"YouTube cookie delete error: {str(e)}", exc_info=True)
        return JsonResponse({
            'success': False,
            'error': f'L·ªói khi x√≥a cookie: {str(e)}'
        }, status=500)


@csrf_exempt
@require_POST
@login_required
def get_youtube_cookie_status(request):
    """API endpoint ƒë·ªÉ l·∫•y tr·∫°ng th√°i cookie c·ªßa user"""
    try:
        from .models import UserYouTubeCookie
        
        user_cookie = UserYouTubeCookie.objects.filter(user=request.user).first()
        
        if user_cookie:
            return JsonResponse({
                'success': True,
                'has_cookie': True,
                'is_valid': user_cookie.is_cookie_valid(),
                'created_at': user_cookie.created_at.isoformat(),
                'file_name': user_cookie.cookie_file.name if user_cookie.cookie_file else None
            })
        else:
            return JsonResponse({
                'success': True,
                'has_cookie': False,
                'is_valid': False
            })
            
    except Exception as e:
        logger.error(f"YouTube cookie status error: {str(e)}", exc_info=True)
        return JsonResponse({
            'success': False,
            'error': f'L·ªói khi l·∫•y tr·∫°ng th√°i cookie: {str(e)}'
        }, status=500)


@csrf_exempt
@require_POST
@login_required
def cancel_youtube_import(request):
    """API endpoint ƒë·ªÉ h·ªßy import ƒëang ch·∫°y"""
    try:
        user_id = request.user.id
        logger.info(f"Cancel import request from user {user_id}")
        
        if cancel_import_session(user_id):
            return JsonResponse({
                'success': True,
                'message': 'Import ƒë√£ ƒë∆∞·ª£c h·ªßy th√†nh c√¥ng'
            })
        else:
            return JsonResponse({
                'success': False,
                'error': 'Kh√¥ng c√≥ import n√†o ƒëang ch·∫°y ƒë·ªÉ h·ªßy'
            }, status=404)
            
    except Exception as e:
        logger.error(f"Cancel import error: {str(e)}", exc_info=True)
        return JsonResponse({
            'success': False,
            'error': f'L·ªói khi h·ªßy import: {str(e)}'
        }, status=500)


@csrf_exempt
@require_POST
@login_required
def get_youtube_import_status(request):
    """API endpoint ƒë·ªÉ l·∫•y tr·∫°ng th√°i import hi·ªán t·∫°i"""
    try:
        user_id = request.user.id
        progress = get_import_progress(user_id)
        
        if progress:
            return JsonResponse({
                'success': True,
                'progress': progress
            })
        else:
            return JsonResponse({
                'success': True,
                'progress': {'status': 'idle', 'message': 'Kh√¥ng c√≥ import n√†o ƒëang ch·∫°y', 'percentage': 0}
            })
            
    except Exception as e:
        logger.error(f"Get import status error: {str(e)}", exc_info=True)
        return JsonResponse({
            'success': False,
            'error': f'L·ªói khi l·∫•y tr·∫°ng th√°i import: {str(e)}'
        }, status=500)


@csrf_exempt
@require_POST
@login_required
def test_youtube_endpoint(request):
    """Test endpoint ƒë·ªÉ debug YouTube import"""
    try:
        logger.info("Test endpoint called")
        return JsonResponse({
            'success': True,
            'message': 'Test endpoint ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng',
            'timestamp': timezone.now().isoformat(),
            'user': request.user.username
        })
    except Exception as e:
        logger.error(f"Test endpoint error: {str(e)}", exc_info=True)
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)


@csrf_exempt
@require_POST
@login_required
def debug_url_processing(request):
    """Debug endpoint ƒë·ªÉ test URL processing"""
    try:
        data = json.loads(request.body)
        url = data.get('url', '').strip()
        
        logger.info(f"Debug URL processing: {url}")
        
        # Test URL processing logic
        import re
        has_list_param = bool(re.search(r'[?&]list=', url))
        is_radio_mode = bool(re.search(r'[?&]list=RD', url))
        is_playlist = '/playlist' in url or (has_list_param and not is_radio_mode)
        
        # Clean URL if needed
        cleaned_url = url
        if not is_playlist and ('&list=' in url or '?list=' in url):
            cleaned_url = re.sub(r'[?&]list=[^&]*', '', url)
            cleaned_url = re.sub(r'&start_radio=[^&]*', '', cleaned_url)
            cleaned_url = re.sub(r'[?&]+$', '', cleaned_url)
        
        return JsonResponse({
            'success': True,
            'original_url': url,
            'cleaned_url': cleaned_url,
            'has_list_param': has_list_param,
            'is_radio_mode': is_radio_mode,
            'is_playlist': is_playlist,
            'url_changed': url != cleaned_url
        })
    except Exception as e:
        logger.error(f"Debug URL processing error: {str(e)}", exc_info=True)
        return JsonResponse({
            'success': False,
            'error': str(e)
        }, status=500)
