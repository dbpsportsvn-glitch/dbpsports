# Generated by Django 4.2.13 on 2025-09-05 05:37

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='HomeBanner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120)),
                ('subtitle', models.CharField(blank=True, max_length=200)),
                ('button_text', models.CharField(blank=True, max_length=40)),
                ('button_url', models.URLField(blank=True)),
                ('image', models.ImageField(upload_to='banners/')),
                ('order', models.PositiveIntegerField(default=0, help_text='Thứ tự hiển thị, nhỏ trước')),
                ('is_active', models.BooleanField(default=True)),
                ('start_at', models.DateTimeField(blank=True, null=True)),
                ('end_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ('order', 'id'),
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('status', models.CharField(choices=[('REGISTRATION_OPEN', 'Đang mở đăng ký'), ('IN_PROGRESS', 'Đang diễn ra'), ('FINISHED', 'Đã kết thúc')], default='REGISTRATION_OPEN', max_length=20)),
                ('image', models.ImageField(blank=True, null=True, upload_to='tournament_banners/')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('coach_name', models.CharField(blank=True, max_length=100)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='team_logos/')),
                ('payment_status', models.CharField(choices=[('UNPAID', 'Chưa thanh toán'), ('PENDING', 'Chờ xác nhận'), ('PAID', 'Đã thanh toán')], default='UNPAID', max_length=10)),
                ('payment_proof', models.ImageField(blank=True, null=True, upload_to='payment_proofs/')),
                ('captain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='teams', to='tournaments.group')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams', to='tournaments.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=100)),
                ('jersey_number', models.PositiveIntegerField()),
                ('position', models.CharField(choices=[('GK', 'Thủ môn'), ('DF', 'Hậu vệ'), ('MF', 'Tiền vệ'), ('FW', 'Tiền đạo')], max_length=10)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='player_avatars/')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='tournaments.team')),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_round', models.CharField(choices=[('GROUP', 'Vòng bảng'), ('QUARTER', 'Tứ kết'), ('SEMI', 'Bán kết'), ('FINAL', 'Chung kết')], default='GROUP', max_length=10)),
                ('match_time', models.DateTimeField()),
                ('location', models.CharField(blank=True, max_length=200)),
                ('team1_score', models.PositiveIntegerField(blank=True, null=True)),
                ('team2_score', models.PositiveIntegerField(blank=True, null=True)),
                ('livestream_url', models.URLField(blank=True, max_length=500, null=True)),
                ('referee', models.CharField(blank=True, max_length=100, null=True)),
                ('commentator', models.CharField(blank=True, max_length=100, null=True)),
                ('ticker_text', models.CharField(blank=True, help_text='Dòng chữ chạy trên màn hình livestream. Nếu để trống, hệ thống sẽ dùng thông báo mặc định.', max_length=255)),
                ('team1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches_as_team1', to='tournaments.team')),
                ('team2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches_as_team2', to='tournaments.team')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='tournaments.tournament')),
            ],
        ),
        migrations.CreateModel(
            name='Lineup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('STARTER', 'Đá chính'), ('SUBSTITUTE', 'Dự bị')], max_length=10)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lineups', to='tournaments.match')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lineups', to='tournaments.player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lineups', to='tournaments.team')),
            ],
        ),
        migrations.AddField(
            model_name='group',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups', to='tournaments.tournament'),
        ),
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minute', models.PositiveIntegerField(blank=True, null=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='goals', to='tournaments.match')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='goals', to='tournaments.player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='goals', to='tournaments.team')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(max_length=500)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='tournaments.match')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card_type', models.CharField(choices=[('YELLOW', 'Thẻ vàng'), ('RED', 'Thẻ đỏ')], max_length=10)),
                ('minute', models.PositiveIntegerField(blank=True, null=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cards', to='tournaments.match')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cards', to='tournaments.player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cards', to='tournaments.team')),
            ],
        ),
        migrations.AddConstraint(
            model_name='team',
            constraint=models.UniqueConstraint(fields=('tournament', 'name'), name='uniq_team_name_in_tournament'),
        ),
        migrations.AddConstraint(
            model_name='player',
            constraint=models.UniqueConstraint(fields=('team', 'jersey_number'), name='uniq_jersey_per_team'),
        ),
        migrations.AddConstraint(
            model_name='player',
            constraint=models.CheckConstraint(check=models.Q(('jersey_number__gte', 1), ('jersey_number__lte', 99)), name='jersey_between_1_99'),
        ),
        migrations.AlterUniqueTogether(
            name='lineup',
            unique_together={('match', 'player')},
        ),
        migrations.AddConstraint(
            model_name='group',
            constraint=models.UniqueConstraint(fields=('tournament', 'name'), name='uniq_group_name_in_tournament'),
        ),
        migrations.AddConstraint(
            model_name='goal',
            constraint=models.CheckConstraint(check=models.Q(('minute__gte', 0), ('minute__lte', 150)), name='goal_minute_range'),
        ),
        migrations.AddConstraint(
            model_name='card',
            constraint=models.CheckConstraint(check=models.Q(('minute__gte', 0), ('minute__lte', 150)), name='card_minute_range'),
        ),
    ]
