from django.core.management.base import BaseCommand
from django.core.mail import send_mail
from django.template.loader import render_to_string
from django.utils import timezone
from datetime import datetime

class Command(BaseCommand):
    help = 'Test g·ª≠i email v·ªõi template m·ªõi'

    def add_arguments(self, parser):
        parser.add_argument(
            '--email',
            type=str,
            default='thienhamedia2024@gmail.com',
            help='Email ƒë·ªãa ch·ªâ nh·∫≠n (m·∫∑c ƒë·ªãnh: thienhamedia2024@gmail.com)'
        )
        parser.add_argument(
            '--type',
            type=str,
            choices=['shop', 'tournament', 'payment', 'organization', 'all'],
            default='all',
            help='Lo·∫°i email c·∫ßn test (m·∫∑c ƒë·ªãnh: all)'
        )

    def handle(self, *args, **options):
        email = options['email']
        email_type = options['type']
        
        self.stdout.write(
            self.style.SUCCESS(f'Bat dau test gui email den: {email}')
        )
        
        if email_type in ['shop', 'all']:
            self.test_shop_customer_email(email)
            
        if email_type in ['tournament', 'all']:
            self.test_tournament_announcement(email)
            
        if email_type in ['payment', 'all']:
            self.test_payment_confirmed(email)
            
        if email_type in ['organization', 'all']:
            self.test_organization_approved(email)

    def test_shop_customer_email(self, email):
        """Test email x√°c nh·∫≠n ƒë∆°n h√†ng cho kh√°ch h√†ng"""
        
        # Mock data cho ƒë∆°n h√†ng
        order_data = {
            'order': {
                'order_number': 'DBP2025001',
                'customer_name': 'Nguy·ªÖn VƒÉn A',
                'customer_email': email,
                'customer_phone': '0123456789',
                'created_at': timezone.now(),
                'get_status_display': 'ƒêang x·ª≠ l√Ω',
                'get_payment_method_display': 'Chuy·ªÉn kho·∫£n',
                'shipping_address': '123 ƒê∆∞·ªùng ABC',
                'shipping_district': 'Qu·∫≠n 1',
                'shipping_city': 'TP.HCM',
                'shipping_fee': 30000,
                'total_amount': 450000,
                'subtotal': 420000,
                'items': [
                    {
                        'product': {'name': 'Gi√†y b√≥ng ƒë√° Nike'},
                        'quantity': 1,
                        'price': 420000,
                        'total_price': 420000
                    }
                ]
            }
        }
        
        # Render template
        html_message = render_to_string('shop/emails/customer_order_confirmation.html', order_data)
        
        # G·ª≠i email
        try:
            send_mail(
                subject='‚úÖ X√°c nh·∫≠n ƒë∆°n h√†ng #DBP2025001 - DBP Sports',
                message='',
                from_email='DBP Sports <noreply@dbpsports.com>',
                recipient_list=[email],
                html_message=html_message,
                fail_silently=False,
            )
            self.stdout.write(
                self.style.SUCCESS('Da gui email xac nhan don hang thanh cong!')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'Loi gui email: {e}')
            )

    def test_tournament_announcement(self, email):
        """Test email th√¥ng b√°o gi·∫£i ƒë·∫•u"""
        
        # Mock data cho th√¥ng b√°o
        announcement_data = {
            'announcement': {
                'title': 'Th√¥ng b√°o quan tr·ªçng v·ªÅ l·ªãch thi ƒë·∫•u',
                'content': 'K√≠nh g·ª≠i c√°c ƒë·ªôi tr∆∞·ªüng,\n\nBan t·ªï ch·ª©c xin th√¥ng b√°o l·ªãch thi ƒë·∫•u v√≤ng lo·∫°i s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√†o ng√†y mai.\n\nVui l√≤ng theo d√µi website ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin m·ªõi nh·∫•t.\n\nTr√¢n tr·ªçng.',
                'tournament': {'name': 'Gi·∫£i b√≥ng ƒë√° phong tr√†o 2025'},
                'created_at': timezone.now()
            }
        }
        
        # Render template
        html_message = render_to_string('tournaments/emails/announcement_notification.html', announcement_data)
        
        # G·ª≠i email
        try:
            send_mail(
                subject='üì¢ Th√¥ng b√°o m·ªõi t·ª´ gi·∫£i Gi·∫£i b√≥ng ƒë√° phong tr√†o 2025 - DBP Sports',
                message='',
                from_email='DBP Sports <noreply@dbpsports.com>',
                recipient_list=[email],
                html_message=html_message,
                fail_silently=False,
            )
            self.stdout.write(
                self.style.SUCCESS('Da gui email th√¥ng b√°o gi·∫£i ƒë·∫•u th√†nh c√¥ng!')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'Loi gui email: {e}')
            )

    def test_payment_confirmed(self, email):
        """Test email x√°c nh·∫≠n thanh to√°n"""
        
        # Mock data cho ƒë·ªôi b√≥ng
        team_data = {
            'team': {
                'name': 'ƒê·ªôi b√≥ng ABC',
                'tournament': {
                    'name': 'Gi·∫£i b√≥ng ƒë√° phong tr√†o 2025',
                    'registration_fee': 500000
                },
                'payment_proof_uploaded_at': timezone.now()
            }
        }
        
        # Render template
        html_message = render_to_string('tournaments/emails/payment_confirmed.html', team_data)
        
        # G·ª≠i email
        try:
            send_mail(
                subject='üéâ X√°c nh·∫≠n thanh to√°n th√†nh c√¥ng - Gi·∫£i b√≥ng ƒë√° phong tr√†o 2025 - DBP Sports',
                message='',
                from_email='DBP Sports <noreply@dbpsports.com>',
                recipient_list=[email],
                html_message=html_message,
                fail_silently=False,
            )
            self.stdout.write(
                self.style.SUCCESS('Da gui email x√°c nh·∫≠n thanh to√°n th√†nh c√¥ng!')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'Loi gui email: {e}')
            )

    def test_organization_approved(self, email):
        """Test email ƒë∆°n v·ªã ƒë∆∞·ª£c duy·ªát"""
        
        # Mock data cho ƒë∆°n v·ªã
        org_data = {
            'organization': {
                'name': 'CLB Th·ªÉ thao ABC',
                'approved_at': timezone.now()
            },
            'owner': {
                'get_full_name': 'Nguy·ªÖn VƒÉn B',
                'username': 'nguyenvanb',
                'email': email
            }
        }
        
        # Render template
        html_message = render_to_string('organizations/emails/organization_approved.html', org_data)
        
        # G·ª≠i email
        try:
            send_mail(
                subject='üéâ ƒê∆°n v·ªã t·ªï ch·ª©c ƒë√£ ƒë∆∞·ª£c duy·ªát - DBP Sports',
                message='',
                from_email='DBP Sports <noreply@dbpsports.com>',
                recipient_list=[email],
                html_message=html_message,
                fail_silently=False,
            )
            self.stdout.write(
                self.style.SUCCESS('Da gui email ƒë∆°n v·ªã ƒë∆∞·ª£c duy·ªát th√†nh c√¥ng!')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'Loi gui email: {e}')
            )
